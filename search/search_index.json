{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 Bienvenido/a al m\u00f3dulo de Acceso a Datos","text":""},{"location":"#descubre-el-poder-de-los-datos","title":"\ud83d\udcc2 \u00a1Descubre el poder de los datos!","text":"<p>En un mundo donde la informaci\u00f3n es el nuevo oro, saber c\u00f3mo manejar datos de forma profesional es m\u00e1s que una ventaja: es una necesidad.  </p> <p>En este m\u00f3dulo aprender\u00e1s a trabajar con ficheros, bases de datos relacionales y no relacionales, y a integrar tu c\u00f3digo con tecnolog\u00edas como JDBC, Hibernate, MongoDB o Spring Boot.</p> <p>\u00bfTe gustar\u00eda crear aplicaciones que se conecten a bases de datos reales como lo hacen Netflix, Amazon o Spotify?</p> <p>\u00bfQuieres entender c\u00f3mo se estructura, almacena y accede a la informaci\u00f3n en proyectos profesionales?</p> <p>Entonces este es tu m\u00f3dulo.</p>"},{"location":"#que-aprenderas","title":"\ud83d\udcd8 \u00bfQu\u00e9 aprender\u00e1s?","text":"<ul> <li>Acceder y manipular datos en distintos formatos</li> <li>Trabajar con ORMs modernos para que tus clases Java se entiendan directamente con la base de datos</li> <li>Utilizar Spring Boot para construir servicios de acceso a datos como los profesionales</li> <li>Conectarte a bases de datos relacionales (MySQL) y no relacionales (MongoDB)</li> <li>Y sobre todo, a programar con cabeza y con prop\u00f3sito</li> </ul>"},{"location":"#nuestro-objetivo","title":"\ud83c\udfaf Nuestro objetivo","text":"<p>Convertirte en alguien capaz de crear, consultar y transformar datos con soltura. No solo para superar el m\u00f3dulo, sino para estar preparado para el mundo real del desarrollo.</p> <p>Aqu\u00ed no solo ver\u00e1s teor\u00eda: te espera una metodolog\u00eda pr\u00e1ctica, enfocada y con retos reales. Te formar\u00e1s para el presente\u2026 y para el futuro.</p>"},{"location":"#y-si-eres-un-ojeador-o-docente","title":"\ud83d\udcbc \u00bfY si eres un ojeador o docente?","text":"<p>Este sitio muestra c\u00f3mo trabajamos este m\u00f3dulo dentro del curr\u00edculo de 2\u00ba DAM. Si eres profesor/a, puedes tomarlo como inspiraci\u00f3n para adaptar o enriquecer tu propia programaci\u00f3n. Y si eres una empresa, ver\u00e1s qu\u00e9 conocimientos y tecnolog\u00edas domina el alumnado en esta etapa.</p> <p>\u00bfListo para entrar al mundo del desarrollo profesional de datos? \ud83d\udca1 \u00a1Empieza explorando las unidades del curso!</p>"},{"location":"about/","title":"About me \u2764\ufe0f\u200d\ud83d\udd25","text":"<p>Mi nombre es Patricia Mart\u00ed, soy Ingeniera en Inform\u00e1tica. Durante casi una d\u00e9cada me dediqu\u00e9 al desarrollo software de manera profesional en diferentes empresas nacionales e internacionales. </p> <p>Actualmente, soy docente en el campo de la programaci\u00f3n, donde puedo compartir con entusiasmo y pasi\u00f3n los conocimientos y habilidades aprendidas durante mi trayectoria. </p> <p>Mi objetivo es inspirar a la pr\u00f3xima generaci\u00f3n de desarrolladores y ayudarles a adentrarse en el emocionante mundo de la programaci\u00f3n y la tecnolog\u00eda.</p> <p>Para cualquier consulta o mejora, pueden escribirme a trav\u00e9s de mi correo electr\u00f3nico p.marti2@edu.gva.es.</p>"},{"location":"ud1/16randomaccessfile/","title":"Acceso aleatorio a ficheros","text":"<p>Hasta ahora, hemos escrito en un fichero, bien al principio del fichero, o bien al final del mismo. Controlando este comportamiento utilizando valores en el enum <code>StandardOpenOptions</code>. Todos estos flujos de E/S que hemos usado se conocen como flujos secuenciales en Java.</p> <p>Un fichero que se lee o escribe mediante un flujo secuencial se denomina fichero de acceso secuencial. Los datos de un fichero de acceso secuencial NO se pueden actualizar.</p> <p>Hay otra forma de acceder a los datos de un fichero, y es con la clase <code>RandomAccessFile</code> (ficheros de acceso aleatorio). Esta clase ofrece la posibilidad de acceder directamente a los datos y modificarlos en cualquier posici\u00f3n espec\u00edfica del fichero. Permite leer y escribir datos simult\u00e1neamente. Los archivos de acceso aleatorio son \u00fatiles para muchas aplicaciones diferentes.</p> <p>La clase <code>RandomAccessFile</code> se usa tanto para leer como para escribir. Escribe y lee datos binarios utilizando m\u00e9todos especiales, que llevan la cuenta de cu\u00e1ntos bytes ser\u00e1n le\u00eddos o escritos.</p>"},{"location":"ud1/16randomaccessfile/#puntero-de-la-clase-randomaccessfile","title":"Puntero de la clase <code>RandomAccessFile</code>","text":"<p>Un fichero de acceso aleatorio se comporta como un gran array de bytes almacenados en el sistema de archivos. Hay un puntero especial, o \u00edndice en el array impl\u00edcito, llamado file pointer (puntero de fichero). El puntero indica la posici\u00f3n actual en el fichero.</p> <p>Se coloca en uno de estos bytes en el fichero y se puede mover a cualquier posici\u00f3n arbitraria antes de leer o escribir. En otras palabras, se lleva a cabo una operaci\u00f3n de lectura o escritura en la ubicaci\u00f3n del puntero.</p> <p>Cuando se abre un <code>RandomAcessFile</code>, el puntero se establece en 0, lo que indica el inicio del fichero. Para mover el file pointer, se ejecuta el m\u00e9todo <code>seek</code>, pas\u00e1ndole un valor long, que es la posici\u00f3n en el fichero a la que deseamos movernos.</p> <p>Para obtener la posici\u00f3n del file pointer se ejecuta el m\u00e9todo <code>getFilePointer()</code>.</p> <p>Cuando leemos o escribimos datos en el archivo usando m\u00e9todos de lectura o escritura, el puntero del archivo avanza al siguiente elemento de datos (es decir, el siguiente byte). Pero, dependiendo del tipo de m\u00e9todo de lectura o escritura que estemos usando, el puntero se mover\u00e1 un determinado n\u00famero de bytes cuando finalicen esas operaciones.</p> <p>Por ejemplo, si leemos un valor int usando el m\u00e9todo readInt() del archivo, JVM lee 4 bytes usando el puntero, y ahora el puntero del archivo est\u00e1 4 bytes por delante de la posici\u00f3n anterior, como se muestra en la figura a continuaci\u00f3n.</p> <p></p> <pre><code>RandomAccessFile raf = ....\nraf.seek(position); //mueve el puntero a una posici\u00f3n\nraf.seek(0); //mueve el puntero al inicio del fichero\nraf.seek(raf.length()); //mueve el puntero al final del fichero\n</code></pre>"},{"location":"ud1/16randomaccessfile/#cuando-usamos-lecturaescritura-con-ficheros-de-acceso-aleatorio","title":"\u00bfCu\u00e1ndo usamos lectura/escritura con ficheros de acceso aleatorio?","text":"<p>Imagina que tenemos un fichero con mucho millones de registros, y en un momento dado, necesitas acceder a unos 50 registros solamente. En vez de cargar un mill\u00f3n de registros en memoria, se puede cargar simplemente un array o mapa, con informaci\u00f3n sobre c\u00f3mo localizar los registros deseados en el fichero. No queremos usar acceso secuencial, y leer desde el principio del fichero, que pueden ser 10 millones de registros, comprobando cada uno para ver si coincide.</p> <p>RandomAccessFile nos permite avanzar o retroceder r\u00e1pidamente a una posici\u00f3n espec\u00edfica del fichero. Es decir, nos permite leer solo los datos importantes que necesita mi aplicaci\u00f3n.</p>"},{"location":"ud1/16randomaccessfile/#constructor-de-la-clase-randomaccessfile","title":"Constructor de la clase RandomAccessFile","text":"<p>Para construir un objeto de la clase tenemos que especificar el modo (mode) que determina qu\u00e9 tipo de acceso a ficheros est\u00e1 permitido.</p> <ul> <li>r: el fichero es de solo lectura.</li> <li>rw: se abre en modo lectura-escritura.</li> <li>rws: se abre para lectura y escritura y cada cambio en los datos del fichero se escribir\u00e1 inmediatamente en el dispositivo f\u00edsico.</li> </ul> <p>RandomAccessFile raf = new RandomAccessFile(\"myfile.dat\", \"rw\");</p>"},{"location":"ud1/16randomaccessfile/#ejemplo-de-un-programa-que-anade-texto-al-final-de-un-fichero","title":"Ejemplo de un programa que a\u00f1ade texto al final de un fichero","text":"<pre><code>public static void main(String[] args) {\n//Se abre con el puntero al inicio del fichero\ntry (RandomAccessFile ra = new RandomAccessFile(\"files/file.dat\", \"rw\")) {\nra.writeUTF(\"Java\");\nra.writeChar('\\n');\nra.seek(0); //muevo el puntero al inicio del fichero\nra.seek(ra.length());//muevo el punto al final del fichero\nra.writeUTF(\"Acceso aleatorio\");\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\n}\n</code></pre>"},{"location":"ud1/17configfiles/","title":"Ficheros de configuraci\u00f3n","text":"<p>En Java es habitual guardar algunos par\u00e1metros de configuraci\u00f3n de nuestro programa en un fichero de propiedades. Un fichero de propiedades no es m\u00e1s que un fichero de texto, habitualmente con la extensi\u00f3n \u201c.properties\u201d, en donde cada l\u00ednea tiene una pareja clave=valor.</p> <p>En la API de Java se incluyen librer\u00edas para trabajar con los ficheros de configuraci\u00f3n. Puesto que todos siguen un mismo patr\u00f3n, es la librer\u00eda la que se encarga de acceder al fichero a bajo nivel y el programador s\u00f3lo tiene que indicar a que propiedad quiere acceder o que propiedad quiere modificar, sin tener que a\u00f1adir nada de c\u00f3digo para leer o escribir el fichero tal.</p> <p>Aqu\u00ed se muestra un ejemplo de fichero de configuraci\u00f3n, llamado <code>datasource.properties</code>, que almacena informaci\u00f3n sobre la base de datos:</p> <p></p> <p>La primera l\u00ednea del ejemplo es un comentario, que se indica con #, y las posteriores cada clave, parte izquierda del =, ser\u00e1 un par\u00e1metro de nuestra configuraci\u00f3n separado por un igual donde est\u00e1 su valor correspondiente, parte derecha del =.</p> <p>Java nos proporciona la clase <code>Properties</code>, para leer de forma sencilla los ficheros de configuraci\u00f3n.</p>"},{"location":"ud1/17configfiles/#cargar-el-fichero-de-configuracion","title":"Cargar el fichero de configuraci\u00f3n","text":"<p>Lo primero que haremos ser\u00e1 inicializar nuestro objeto Properties.</p> <pre><code>Properties properties = new Properties();\n</code></pre> <p>Esta clase tiene un m\u00e9todo <code>load()</code> que permite cargar el fichero. No tenemos m\u00e1s que pasarle un <code>InputStream</code> o un <code>Reader</code> de java.</p> <pre><code>properties.load(new FileReader(\"datasource.properties\"));\n</code></pre>"},{"location":"ud1/17configfiles/#leer-una-propiedad","title":"Leer una propiedad","text":"<p>El m\u00e9todo <code>properties.getProperty(String)</code> nos permite, pas\u00e1ndole una clave, obtener el valor asociado a ella. En nuestro ejemplo, pasando como clave \"db.username\", obtendr\u00edamos el valor asociado a ella \"admin\" (siempre como String, aunque sea un n\u00famero).</p> <p>Si la clave no existe, obtendremos <code>null</code> como resultado. Sin embargo, tenemos una variante de <code>getProperty()</code> que permite obtener un valor por defecto en caso de que no exista la clave, como en el siguiente c\u00f3digo:</p> <pre><code>properties.getProperty(\"db.username\", \"default value\"));\n</code></pre> <p>Al m\u00e9todo <code>getProperty()</code> le pasamos como primer par\u00e1metro la clave cuyo valor queremos obtener, y como segundo par\u00e1metro el valor que queremos por defecto, en caso de que la clave no tenga valor asociado.</p>"},{"location":"ud1/17configfiles/#leer-todas-las-propiedades","title":"Leer todas las propiedades","text":"<p>La clase <code>Properties</code> tiene varios m\u00e9todos que nos permiten obtener todas las claves que hay en el fichero. Para ello recurriremos a un objeto <code>Enumeration</code> que nos permitir\u00e1 iterar sobre ellas. En este objeto almacenamos todas las claves de nuestro properties. Recorriendo estas claves, podemos obtener todos los valores. El siguiente c\u00f3digo consulta todas las claves con el m\u00e9todo <code>keys()</code> y luego realiza un bucle para ir sacando por pantalla todos los valores.</p> <pre><code>Enumeration&lt;Object&gt; keys = properties.keys(); while (keys.hasMoreElements()) {\nObject key = keys.nextElement(); System.out.println(key + \" = \"+ properties.get(key));\n}\n</code></pre>"},{"location":"ud1/17configfiles/#anadir-o-modificar-una-propiedad","title":"A\u00f1adir o modificar una propiedad","text":"<p>Para a\u00f1adir/modificar el valor de una propiedad, la clase <code>Properties</code> tiene un m\u00e9todo llamado <code>setProperty(String key, String value)</code> que te permite a\u00f1adir una pareja clave/valor nuevas o modificar una ya existente.</p> <pre><code>properties.setProperty(\"db.port\", \"4020\");\n</code></pre> <p>Una vez que hemos modificado/a\u00f1adido valores, tendremos que guardar el fichero. Para ello la clase <code>Properties</code> tiene dos m\u00e9todos: <code>save()</code> y <code>store()</code>. El m\u00e9todo <code>save()</code> est\u00e1 obsoleto, por lo que no se aconseja su uso. Para guardar los cambios, debemos llamar a <code>store()</code> pas\u00e1ndole un <code>OutputStream</code> o un <code>Writer</code> de java.</p> <pre><code>properties.store(new FileWriter(\"datasource.properties\"),\"Added database port\");\n</code></pre> <p>El m\u00e9todo <code>store()</code> admite un segundo par\u00e1metro que es un comentario que se a\u00f1adir\u00e1 como una l\u00ednea de cabecera en el fichero. El resultado de esta llamada es un fichero con un contenido como el siguiente:</p> <p></p> <p>Contiene el comentario que pusimos en la llamada a <code>store()</code> y la fecha, que la inserta de regalo.</p>"},{"location":"ud1/18xmlfiles/","title":"Ficheros XML","text":"<p>XML es la abreviatura de Extensible Markup Language y es un formato de intercambio de datos establecido. XML fue definido en 1998 por el World Wide Web Consortium (W3C). A diferencia de otros lenguajes, XML da soporte a bases de datos, siendo \u00fatil cuando varias aplicaciones deben comunicarse entre s\u00ed o integrar informaci\u00f3n.</p>"},{"location":"ud1/18xmlfiles/#estructura-de-un-documento-xml","title":"Estructura de un documento XML","text":"<p>Un documento XML consta de elementos, cada elemento tiene una etiqueta de inicio, contenido y una etiqueta de finalizaci\u00f3n. Una etiqueta consiste en una marca hecha en el documento, que se\u00f1ala una porci\u00f3n de este como un elemento. Un pedazo de informaci\u00f3n con un sentido claro y definido. Las etiquetas tienen la forma <code>&lt;nombre&gt;</code>, donde nombre es el nombre del elemento que se est\u00e1 se\u00f1alando.</p>"},{"location":"ud1/18xmlfiles/#documento-xml-valido","title":"Documento XML v\u00e1lido","text":"<p>Los documentos denominados como \u00abbien formados\u00bb (del ingl\u00e9s well formed) son aquellos que cumplen con todas las definiciones b\u00e1sicas de formato y pueden, por lo tanto, analizarse correctamente por cualquier analizador sint\u00e1ctico (parser) que cumpla con la norma. Esto significa que debe aplicarse a las siguientes condiciones:</p> <ol> <li>Cada etiqueta de apertura tiene una etiqueta de cierre.</li> <li>Todas las etiquetas est\u00e1n completamente anidadas.</li> <li>Los documentos XML solamente permiten un elemento ra\u00edz del que todos los dem\u00e1s sean parte, es decir, solo pueden tener un elemento inicial.</li> <li>El XML es sensible a may\u00fasculas y min\u00fasculas.</li> </ol>"},{"location":"ud1/18xmlfiles/#partes-de-un-documento-xml","title":"Partes de un documento XML","text":""},{"location":"ud1/18xmlfiles/#prologo","title":"Pr\u00f3logo","text":"<p>Aunque no es obligatorio, los documentos XML pueden empezar con unas l\u00edneas que describen la versi\u00f3n XML, el tipo de documento y otras cosas.</p> <p>El pr\u00f3logo de un documento XML contiene:</p> <ul> <li>Una declaraci\u00f3n XML. Es la sentencia que declara al documento como un documento XML.</li> <li>Una declaraci\u00f3n de tipo de documento. Enlaza el documento con su DTD (definici\u00f3n de tipo de documento), o el DTD puede estar incluido en la propia declaraci\u00f3n o ambas cosas al mismo tiempo.</li> <li>Uno o m\u00e1s comentarios e instrucciones de procesamiento. Ejemplo:</li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n</code></pre>"},{"location":"ud1/18xmlfiles/#cuerpo","title":"Cuerpo","text":"<p>A diferencia del pr\u00f3logo, el cuerpo no es opcional en un documento XML, el cuerpo debe contener solo un elemento ra\u00edz, caracter\u00edstica indispensable tambi\u00e9n para que el documento est\u00e9 bien formado. Sin embargo es necesaria la adquisici\u00f3n de datos para su buen funcionamiento.</p>"},{"location":"ud1/18xmlfiles/#elementos","title":"Elementos","text":"<p>Los elementos XML pueden tener contenido (m\u00e1s elementos, caracteres o ambos), o bien ser elementos vac\u00edos.</p>"},{"location":"ud1/18xmlfiles/#atributos","title":"Atributos","text":"<p>Los elementos pueden tener atributos, que son una manera de incorporar caracter\u00edsticas o propiedades a los elementos de un documento. Deben ir entre comillas.</p> <pre><code>&lt;person sex=\"female\"&gt;\n&lt;firstname&gt;Patricia&lt;/firstname&gt;\n&lt;lastname&gt;Marti&lt;/lastname&gt;\n&lt;/person&gt;\n</code></pre> <p>En el ejemplo, el elemento <code>person</code> tiene un atributo <code>sex</code>.</p>"},{"location":"ud1/18xmlfiles/#comentarios","title":"Comentarios","text":"<p>Comentarios a modo informativo para el programador que han de ser ignorados por el procesador. Los comentarios en XML tienen el siguiente formato:</p> <pre><code>  &lt;!-- Comment --&gt;\n</code></pre>"},{"location":"ud1/18xmlfiles/#ejemplo-de-un-documento-xml","title":"Ejemplo de un documento XML","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"&gt;\n\n&lt;!-- This is a comment --&gt;\n&lt;products&gt; &lt;product&gt; &lt;name&gt;Cereales&lt;/name&gt; &lt;price&gt;3.45&lt;/price&gt; &lt;/product&gt; &lt;product&gt; &lt;name&gt;Colacao&lt;/name&gt; &lt;price&gt;1.45&lt;/price&gt; &lt;/product&gt; &lt;product&gt; &lt;name&gt;Agua mineral&lt;/name&gt; &lt;price&gt;1.00&lt;/price&gt; &lt;/product&gt; &lt;/products&gt;\n</code></pre>"},{"location":"ud1/18xmlfiles/#url-xml","title":"Url XML","text":"<p>El est\u00e1ndar XML</p>"},{"location":"ud1/18xmlfiles/#java-xml","title":"Java XML","text":"<p>Java permite usar analizadores XML como DOM, SAX, StAX y JDOM para leer y escribir documentos XML; Adem\u00e1s, JAXB para convertir XML a/desde objetos.</p> <p>En general, existen dos modelos de programaci\u00f3n para trabajar con documentos XML: DOM y SAX (Streaming).</p>"},{"location":"ud1/18xmlfiles/#dom","title":"DOM","text":"<p>El modelo de objeto de documento (DOM) utiliza nodos para representar los documentos XML completos como una estructura de \u00e1rbol y almacenarlos en la memoria.</p> <p>DOM es bueno para manipular el archivo XML peque\u00f1o, como leer, escribir y modificar la estructura XML; DOM NO es para analizar o manipular archivos XML grandes porque construir la estructura XML completa en la memoria consume mucha memoria.</p>"},{"location":"ud1/18xmlfiles/#sax","title":"SAX","text":"<p>La API simple para XML (SAX) permite leer el archivo XML de principio a fin, es decir, de manera secuencial.</p> <p>El SAX es r\u00e1pido y eficiente, requiere mucha menos memoria que DOM porque SAX no crea una representaci\u00f3n interna (estructura de \u00e1rbol) de los datos XML, como lo hace un DOM.</p>"},{"location":"ud1/18xmlfiles/#stax","title":"StAX","text":"<p>Streaming API for XML (StAX) est\u00e1 basado en eventos, permite leer y escribir documentos XML. StAX ofrece un modelo de programaci\u00f3n m\u00e1s simple que SAX y una gesti\u00f3n de memoria m\u00e1s eficiente que DOM.</p>"},{"location":"ud1/18xmlfiles/#ejemplo-lectura-xml-desde-una-api","title":"Ejemplo lectura XML desde una API","text":"<pre><code>private static Document loadXMLDocument(String url)  {\ntry (InputStream input = new URL(url).openStream()) {\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nreturn builder.parse(input);\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}\n</code></pre>"},{"location":"ud1/18xmlfiles/#escritura-de-un-documento-xml","title":"Escritura de un documento XML","text":"<pre><code>private static void writeXml(Document doc,\nOutputStream output)\nthrows TransformerException {\nTransformerFactory transformerFactory = TransformerFactory.newInstance();\nTransformer transformer = transformerFactory.newTransformer();\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\nDOMSource source = new DOMSource(doc);\nStreamResult result = new StreamResult(output);\ntransformer.transform(source, result);\n}\n</code></pre>"},{"location":"ud1/19jsonfiles/","title":"Ficheros JSON","text":"<p>JSON (JavaScript Object Notation) es un formato ligero de intercambio de datos. Es un fichero f\u00e1cil de leer y escribir para los humanos y tambi\u00e9n f\u00e1cil de analizar y generar para las m\u00e1quinas. Se basa en un subconjunto del lenguaje de programaci\u00f3n JavaScript. Debido a su amplia adopci\u00f3n como alternativa a XML. JSON es un formato de texto que es completamente independiente del lenguaje pero utiliza convenciones que son ampliamente conocidos por los programadores de la familia de lenguajes C, incluyendo C, C++, C#, Java, JavaScript, Perl, Python, y muchos otros. Estas propiedades hacen que JSON sea un lenguaje ideal para el intercambio de datos.</p> <p>JSON se utiliza hoy en d\u00eda en cada API web \u00fanica.</p> <p>JSON se basa en dos estructuras que son universales; virtualmente todos los lenguajes de programaci\u00f3n las soportan de una forma u otra:</p> <ul> <li>Una colecci\u00f3n de pares de name/value. En varios lenguajes, esto se realiza como un objeto, registro, estructura, diccionario, tabla hash, lista con clave o matriz asociativa.</li> <li>Una lista ordenada de valores. En la mayor\u00eda de los lenguajes, esto se realiza como una matriz, vector, lista o secuencia.</li> </ul>"},{"location":"ud1/19jsonfiles/#tipos-de-datos-disponibles","title":"Tipos de datos disponibles","text":"<ol> <li>N\u00fameros: Se permiten n\u00fameros negativos y opcionalmente pueden contener parte fraccional separada por puntos. Ejemplo: 123.456</li> <li>Cadenas: Representan secuencias de cero o m\u00e1s caracteres. Se ponen entre doble comilla y se permiten cadenas de escape. Ejemplo: \"Hola\"</li> <li>Booleanos: Representan valores booleanos y pueden tener dos valores: true y false</li> <li>null: Representan el valor nulo.</li> <li>Array: Representa una lista ordenada de cero o m\u00e1s valores los cuales pueden ser de cualquier tipo. Los valores se separan por comas y el vector se mete entre corchetes.</li> <li>Objetos: Son colecciones no ordenadas de pares de la forma <code>nombre:valor</code> separados por comas y puestas entre llaves. El nombre tiene que ser una cadena entre comillas dobles. El valor puede ser de cualquier tipo.</li> </ol>"},{"location":"ud1/19jsonfiles/#formato-json","title":"Formato JSON","text":"<ul> <li>Un objeto es un conjunto desordenado de pares de name/value. Un objeto comienza con {(llave izquierda) y termina con} (llave derecha). Cada nombre va seguido de: (dos puntos) y los pares de name/value est\u00e1n separados por, (coma).</li> </ul> <ul> <li>Un array es una colecci\u00f3n ordenada de valores. Una matriz comienza con [(corchete izquierdo) y termina con] (corchete derecho). Los valores est\u00e1n separados por (coma).</li> </ul> <ul> <li>Un value puede ser una cadena entre comillas dobles, un n\u00famero, verdadero, falso, nulo, un objeto o una matriz. Estas estructuras se pueden anidar.</li> </ul>"},{"location":"ud1/19jsonfiles/#ejemplo-de-fichero-json","title":"Ejemplo de fichero JSON","text":"<pre><code># Fichero JSON {\"web-app\": {\n\"servlet\": [   {\n\"servlet-name\": \"cofaxCDS\",\n\"servlet-class\": \"org.cofax.cds.CDSServlet\",\n\"init-param\": {\n\"configGlossary:installationAt\": \"Philadelphia, PA\",\n\"configGlossary:adminEmail\": \"p.marti2@edu.gva.es\",\n\"configGlossary:poweredBy\": \"Patricia Marti\",\n\"configGlossary:poweredByIcon\": \"/images/cofax.gif\",\n\"configGlossary:staticPath\": \"/content/static\",\n\"templateProcessorClass\": \"org.cofax.WysiwygTemplate\",\n\"templateLoaderClass\": \"org.cofax.FilesTemplateLoader\",\n\"templatePath\": \"templates\",\n\"templateOverridePath\": \"\",\n\"defaultListTemplate\": \"listTemplate.htm\",\n\"defaultFileTemplate\": \"articleTemplate.htm\",\n\"useJSP\": false,\n\"dataStoreMaxConns\": 100\n}\n},\nnull,\n{\n\"servlet-name\": \"cofaxEmail\",\n\"servlet-class\": \"org.cofax.cds.EmailServlet\",\n\"init-param\": {\n\"mailHost\": \"mail1\",\n\"mailHostOverride\": \"mail2\"\n}\n}],\n\"servlet-mapping\": {\n\"cofaxCDS\": \"/\",\n\"cofaxEmail\": \"/cofaxutil/aemail/*\",\n\"cofaxAdmin\": \"/admin/*\",\n\"fileServlet\": \"/static/*\",\n\"cofaxTools\": \"/tools/*\"\n},\n\"taglib\": {\n\"taglib-uri\": \"cofax.tld\",\n\"taglib-location\": \"/WEB-INF/tlds/cofax.tld\"\n}\n}\n}\n</code></pre> <p>El fichero anterior se puede traducir como un array de objetos, por ejemplo de la clase <code>Servlet</code>, donde la clase <code>Servlet</code> estar\u00e1 compuesta por atributos como: servlet-name, servlet-class, etc.</p> <p>Existen varias librer\u00edas en Java para parsear ficheros JSON. Entre las m\u00e1s comunes est\u00e1n: Gson, Jackson, JSON.simple, org.json, JsonPATH, etc.</p>"},{"location":"ud1/19jsonfiles/#url-oficial","title":"URL oficial","text":"<p>The JSON Specification</p>"},{"location":"ud1/19jsonfiles/#json-vs-xml","title":"JSON vs XML","text":""},{"location":"ud1/19jsonfiles/#java-json","title":"Java JSON","text":"<p>Java por defecto no ofrece ninguna funcionalidad integrada para analizar o crear JSON, en lugar de eso, tendremos que confiar en una biblioteca/paquete de terceros.</p> <p>En la actualidad existen varias librer\u00edas para pasar transformar un objeto Java en una cadena JSON (serializaci\u00f3n) o viceversa (deserializaci\u00f3n).</p> <p>Desde la p\u00e1gina en donde se encuentra la especificaci\u00f3n de JSON se indican las librer\u00edas m\u00e1s conocidas para tratar/generar informaci\u00f3n relativa al formato JSON en los diferentes lenguajes de programaci\u00f3n.</p> <p>Vamos a ver c\u00f3mo parsear un JSON utilizando el paquete org.json. Los archivos en este paquete implementan codificadores/decodificadores JSON en Java.</p>"},{"location":"ud1/19jsonfiles/#leer-un-json-a-partir-de-una-api","title":"Leer un JSON a partir de una API","text":"<pre><code>//Este m\u00e9todo accede a una URL y se descarga el contenido en forma de String\npublic static String stream(String url) {\ntry (InputStream input = URI.create(url).toURL().openStream()) {\nInputStreamReader isr = new InputStreamReader(input);\nBufferedReader reader = new BufferedReader(isr);\nStringBuilder json = new StringBuilder();\nint c;\nwhile ((c = reader.read()) != -1) {\njson.append((char) c);\n}\nreturn json.toString();\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\n}\npublic static void main(String[] args) {\nString caturl = \"https://catfact.ninja/facts\";\n//parseamos un string a un JSONObject\nJSONObject jsonObject = new JSONObject(stream(caturl));\nJSONArray a = jsonObject.getJSONArray(\"data\");\nJSONObject o = (JSONObject) a.get(0);\nSystem.out.println(o.getString(\"fact\"));\n}\n</code></pre> <p>Un <code>JSONObject</code> es una colecci\u00f3n desordenada de pares clave y valor, que se asemeja a las implementaciones Map nativas de Java.</p>"},{"location":"ud1/20createjar/","title":"C\u00f3mo crear un jar en IntelliJ","text":"<ol> <li>Vamos a File --&gt; Project Structure</li> </ol> <ol> <li>En la secci\u00f3n Artifacts, seleccionamos el s\u00edmbolo \"+\" y seleccionamos el formato .jar --&gt; \"From modules with dependencies\"</li> </ol> <ol> <li>Le decimos cu\u00e1l es la clase main y aceptamos.</li> </ol> <ol> <li>Todav\u00eda no hemos construido el .jar. Para crearlo vamos al men\u00fa \"Build\" --&gt; \"Build Artifact\".</li> </ol> <ol> <li>Seleccionamos \"Build\".</li> </ol> <p>El .jar estar\u00e1 en la carpeta del proyecto dentro de /out/artifacts/...</p>"},{"location":"ud1/22readwriteobjects/","title":"\u2604\ufe0f Escritura y lectura de objetos en Java","text":"<p>Para escribir un objeto y leer esos datos directamente de vuelta a un objeto Java, nos proporciona dos clases:</p> <ul> <li><code>ObjectInputStream</code></li> <li><code>ObjectOutputStream</code></li> </ul> <p>Para entender esto correctamente es necesario saber el significado de serializaci\u00f3n.</p>"},{"location":"ud1/22readwriteobjects/#serialization","title":"\u2728 Serialization","text":"<p>Serializar una clase en programaci\u00f3n se refiere al proceso de convertir un objeto de esa clase en una secuencia de bytes que representa el estado del objeto, incluidos sus datos y la estructura. Esta secuencia de bytes puede ser almacenada, transmitida y posteriormente reconstruida para crear una copia exacta del objeto original, facilitando as\u00ed operaciones como el almacenamiento persistente (en un fichero o BD) o la comunicaci\u00f3n entre procesos. Esto es especialmente \u00fatil en contextos donde se necesita transferir datos entre diferentes componentes de un sistema, o entre distintos sistemas.</p> <p>Solo las instancias de clases Serializables pueden ser serializadas, lo que significa que la clase debe implementar la interfaz <code>Serializable</code>.</p> <p>Esta interfaz no tiene ning\u00fan m\u00e9todo, s\u00f3lo se utiliza para marcar la clase como serializable. Todos los subtipos de una clase serializable son a su vez seriazables.</p> <pre><code>class Employee implements Serializable {\nprivate String name;\nprivate int age;\nprivate List&lt;String&gt; address;\npublic Employee(String name, int age, List&lt;String&gt; address) {\nthis.name = name;\nthis.age = age;\nthis.address = address;\n}\n@Override\npublic String toString() {\nreturn new StringJoiner(\", \", Employee.class.getSimpleName() + \"[\", \"]\")\n.add(\"name='\" + name + \"'\")\n.add(\"age=\" + age)\n.add(\"address=\" + address)\n.toString();\n}\n}\n</code></pre> WriteObject.java<pre><code>//M\u00e9todo para escribir objectos en un fichero\nprivate static void writeObject(Path path, Employee employee) {\ntry(ObjectOutputStream os = new ObjectOutputStream(Files.newOutputStream(path))) {\nos.writeObject(employee);\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\n}\n</code></pre>"},{"location":"ud1/22readwriteobjects/#deserialization","title":"\ud83c\udf86 Deserialization","text":"<p>La serializaci\u00f3n por defecto escribe la clase del objeto, la firma de la clase, y los valores de los campos no est\u00e1ticos. Estos elementos se utilizan para restaurar el objeto y su estado durante la operaci\u00f3n de lectura. A este proceso se le conoce como reconstituci\u00f3n de los datos o deserializaci\u00f3n.</p> ReadObject.java<pre><code>//M\u00e9todo para leer objectos que han sido serializados\nprivate static void readObject(Path path) {\ntry(ObjectInputStream os = new ObjectInputStream(Files.newInputStream(path))) {\nSystem.out.println((Employee) os.readObject());\n} catch (IOException | ClassNotFoundException e) {\nthrow new RuntimeException(e);\n}\n}\n</code></pre> <p></p> <p>\u00bfQu\u00e9 pasar\u00eda si cambiamos el campo age de la clase Employee de int a long despu\u00e9s de haberlo serializado y, ahora volvemos a leerlo?</p> <p>Que se generar\u00eda una excepci\u00f3n de tipo <code>InvalidClassException</code> con el mensaje clase incompatible, con serialVersionUID diferentes.</p>"},{"location":"ud1/22readwriteobjects/#que-es-el-campo-serialversionuid","title":"\ud83c\udf86 \u00bfQu\u00e9 es el campo serialVersionUID?","text":"<p>El campo <code>serialVersionUID</code> es un campo que crea el compilador impl\u00edcitamente en tiempo de ejecuci\u00f3n si no se declara expl\u00edcitamente, para las clases serializables. Se basa en detalles de la clase como el n\u00famero de campos, sus tipos y declaraciones, ...</p> <p>Por tanto, cambiar un campo como hemos hecho antes, generar\u00e1 un UID diferente. Cuando leemos un objeto de un stream, el runtime comprueba el serialVersionUID almacenado. Que se almacena con el objeto escrito en el fichero .dat y lo compara con el compilado de la clase. Si no coinciden, entonces hay un problema de compatibilidad y el runtime lanza esa excepci\u00f3n de clase inv\u00e1lida.</p> <p>Note</p> <p>Tambi\u00e9n ocurre que, diferentes compiladores pueden generar diferentes versiones de UID. Incluso en nuevas versiones de Java tambi\u00e9n se generan diferentes versiones de UID para un mismo c\u00f3digo, y puede ser que no seamos capaces de deserializar nuestros datos.</p> <p>Para asegurarnos que esto no pase, es encarecidamente recomendable incluir el campo de serialVersionUID como un campo est\u00e1tico de la clase como se muestra a continuaci\u00f3n:</p> <pre><code>class Employee implements Serializable {\nprivate final static long serialVersionUID = 1L;\nprivate String name;\nprivate int age;\nprivate List&lt;String&gt; address;\n...\n}\n</code></pre> <p>Ha de ser de tipo long y se puede ver como una especie de n\u00famero de versi\u00f3n de la clase.</p> <p>Ahora si volvemos a probar podemos pensar que funciona, pero da otro error de tipos incompatibles. Aunque hayamos pasado de int a long sigue habiendo repercusiones. Por eso es importante entender las reglas de la serializaci\u00f3n.</p>"},{"location":"ud1/22readwriteobjects/#que-puede-ser-un-cambio-incompatible-que-no-me-va-a-dejar-deserializar","title":"\ud83d\udc31\u200d\ud83d\ude80 \u00bfQu\u00e9 puede ser un cambio incompatible? \u00bfQu\u00e9 no me va a dejar deserializar?","text":"<ol> <li>Cambiar el tipo declarado de un campo primitivo. (Es porque los tipos de datos primitivos toman cierta cantidad de espacio y si eso cambia cuando vayamos a leer tendremos que cambiar cu\u00e1ntos bytes leemos)</li> <li>Eliminar campos.</li> <li>Cambiar un campo de no est\u00e1tico a est\u00e1tico.</li> <li>Cambiar la clase de jerarqu\u00eda.</li> <li>Hay m\u00e1s que podemos encontrar en la documentaci\u00f3n de java en incompatible-changes.</li> </ol>"},{"location":"ud1/22readwriteobjects/#que-cambios-son-compatibles-con-serialization-deserilization","title":"\ud83d\udc31\u200d\ud83d\ude80 \u00bfQu\u00e9 cambios son compatibles con serialization-deserilization?","text":"<ol> <li>A\u00f1adir campos.</li> <li>Cambiar el acceso a un campo. Private, public, etc.</li> <li>Cambiar un campo de est\u00e1tico a no-est\u00e1tico. Es como a\u00f1adir un campo a la clase.</li> </ol>"},{"location":"ud1/22readwriteobjects/#el-modificador-transient","title":"\ud83e\ude85 El modificador transient","text":"<p>Se utiliza para indicar que un campo no debe serializarse. Esto puede ser \u00faltil para variables o atributos que contienen informaci\u00f3n sensible. O simplemente variables que no queremos que persistan de ninguna manera, ya sea en ficheros o bases de datos.</p> <pre><code>class Employee implements Serializable {\nprivate final static long serialVersionUID = 1L;\nprivate final transient long accountId;\nprivate String name;\nprivate int age;\nprivate List&lt;String&gt; address;\n...\n}\n</code></pre> <p>Si probamos a escribir un objeto Employee con su accountId, veremos que al deserializarlo el accountId ser\u00e1 0, no se escribir\u00e1 nada porque lo hemos declarado como transitorio o transient.</p>"},{"location":"ud1/binaryfiles/","title":"\ud83d\udcbe Operaciones con ficheros binarios en Java","text":"<p>Los ficheros binarios almacenan datos en forma de bytes. Se utilizan para archivos no de texto, como im\u00e1genes, audio, v\u00eddeo, ficheros comprimidos, bases de datos, etc.</p> <p>Para leer y escribir este tipo de ficheros, se usan flujos de entrada/salida de bytes.</p>"},{"location":"ud1/binaryfiles/#clases-principales-para-flujos-binarios-javaio","title":"\u270d\ufe0f Clases principales para flujos binarios (<code>java.io</code>)","text":"Operaci\u00f3n Clase usada Descripci\u00f3n Lectura binaria <code>FileInputStream</code> Lee byte a byte desde un fichero Escritura binaria <code>FileOutputStream</code> Escribe byte a byte en un fichero Lectura r\u00e1pida <code>BufferedInputStream</code> A\u00f1ade un b\u00fafer para mayor eficiencia Escritura r\u00e1pida <code>BufferedOutputStream</code> B\u00fafer de salida para rendimiento <p>Estas clases forman parte de la API cl\u00e1sica <code>java.io</code>.</p>"},{"location":"ud1/binaryfiles/#lectura-binaria-con-fileinputstream","title":"\ud83d\udce5 Lectura binaria con <code>FileInputStream</code>","text":"<p><pre><code>try (FileInputStream fis = new FileInputStream(\"entrada.bin\")) {\nint byteLeido;\nwhile ((byteLeido = fis.read()) != -1) {\nSystem.out.println(byteLeido);\n}\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> \ud83d\udd0e Este c\u00f3digo lee byte a byte. Para archivos grandes, es mejor usar un buffer.</p>"},{"location":"ud1/binaryfiles/#escritura-binaria-con-fileoutputstream","title":"\ud83d\udce5 Escritura binaria con <code>FileOutputStream</code>","text":"<p><pre><code>try (FileOutputStream fos = new FileOutputStream(\"salida.bin\")) {\nbyte[] datos = {65, 66, 67}; // A, B, C\nfos.write(datos);\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> \u270f\ufe0f Tambi\u00e9n puedes escribir byte a byte con fos.write(65);</p>"},{"location":"ud1/binaryfiles/#operaciones-con-buffers","title":"Operaciones con buffers","text":"<p>Un buffer es una memoria intermedia que almacena temporalmente datos antes de leerlos o escribirlos. Esto hace que el programa:</p> <ul> <li>Haga menos accesos al disco (que son lentos)</li> <li>Sea m\u00e1s eficiente y r\u00e1pido</li> </ul> <p>Este b\u00fafer almacena los bytes antes de que se escriban en el disco. Recuerda que un b\u00fafer es un bloque de memoria que se usa para ensamblar datos antes de que se escriban todos a la vez.</p> <p>Cuando se cierra el stream <code>close()</code>, es como si pinch\u00e1ramos en guardar de forma gr\u00e1fica, es decir, que si no cerramos el stream es como si el fichero estuviera vac\u00edo. Tambi\u00e9n la operaci\u00f3n <code>flush()</code> que guarda en el fichero lo que contiene el buffer actualmente.</p>"},{"location":"ud1/binaryfiles/#ejemplo-escritura-sin-buffer","title":"\ud83e\uddf1 Ejemplo escritura sin buffer","text":"<p><pre><code>try (FileOutputStream fos = new FileOutputStream(\"datos.bin\")) {\nfor (int i = 0; i &lt; 1000; i++) {\nfos.write(i); // Se escribe en disco 1000 veces, esto es muy lento\n}\n}\n</code></pre> \u26a0\ufe0f Cada <code>write()</code> escribe directamente al disco. Muy lento.</p>"},{"location":"ud1/binaryfiles/#ejemplo-de-escritura-con-bufferedoutputstream-buffer","title":"\u2705 Ejemplo de escritura con BufferedOutputStream (buffer)","text":"<p><pre><code>try (BufferedOutputStream bos = new BufferedOutputStream(\nnew FileOutputStream(\"datos.bin\"))) {\nfor (int i = 0; i &lt; 1000; i++) {\nbos.write(i); // Se acumulan en memoria y luego se escriben de golpe cuando se hace el close autom\u00e1tico\n}\n}\n</code></pre> \u2705 El buffer agrupa muchos bytes y los escribe en bloque, mejorando el rendimiento. Si queremos guardar en un punto del programa podemos hacer <code>bos.flush()</code> que realiza un volcado del buffer al fichero, guarda.</p>"},{"location":"ud1/binaryfiles/#ejemplo-de-lectura-con-bufferedinputstream-buffer","title":"\u2705 Ejemplo de lectura con BufferedInputStream (buffer)","text":"<p><pre><code>try (BufferedInputStream bis = new BufferedInputStream(\nnew FileInputStream(\"entrada.bin\"))) {\nint byteLeido;\nwhile ((byteLeido = bis.read()) != -1) {\nSystem.out.println(byteLeido);\n}\n}\n</code></pre> <code>BufferedInputStream</code> crea un buffer interno. Cuando llamas por primera vez a <code>bis.read()</code>, no lee 1 byte del disco, sino que: - Lee miles de bytes del disco de golpe (llamada costosa de E/S). - Los guarda en memoria (en su buffer interno). - Luego, cada llamada a <code>.read()</code> devuelve el siguiente byte del buffer, lo cual es muy r\u00e1pido porque accede a memoria, no al disco. - Cuando el buffer se vac\u00eda, se vuelve a rellenar con otros 8192 bytes del fichero.</p>"},{"location":"ud1/binaryfiles/#que-son-los-wrappers-y-por-que-usar-buffers","title":"\ud83e\uddfb \u00bfQu\u00e9 son los wrappers y por qu\u00e9 usar buffers?","text":"<p>En Java, muchas clases de entrada/salida se envuelven unas dentro de otras para mejorar su funcionamiento. Esto se llama patr\u00f3n decorador y permite a\u00f1adir funcionalidades sin modificar la clase original.</p> <p>La clase <code>BufferedInputStream</code>/<code>BufferedOuputStream</code> necesita siempre envolver otro <code>InputStream</code>, por lo tanto no se puede usar sola sin un wrapper.</p>"},{"location":"ud1/binaryfiles/#por-que","title":"\ud83d\udd0d \u00bfPor qu\u00e9?","text":"<p>Porque la clase <code>BufferedInputStream</code> o <code>BufferedOuputStream</code> no sabe de d\u00f3nde leer/escribir datos por s\u00ed misma. Su funci\u00f3n es a\u00f1adir un b\u00fafer a otro flujo de entrada (por ejemplo, FileInputStream/FileOutputStream), pero necesita que alguien le proporcione los datos reales.</p> <p><pre><code>try (BufferedInputStream bis = new BufferedInputStream(\nnew FileInputStream(\"archivo.bin\"))) {\n// leer datos\n}\n</code></pre> Aqu\u00ed, <code>FileInputStream</code> accede al archivo y <code>BufferedInputStream</code> a\u00f1ade un buffer por encima.</p>"},{"location":"ud1/binaryfiles/#leer-y-escribir-ficheros-binarios-con-javaniofilefiles","title":"\u270d\ufe0f Leer y escribir ficheros binarios con <code>java.nio.file.Files</code>","text":"<p>En Java, la clase <code>java.nio.file.Files</code> ofrece formas muy sencillas y potentes de leer y escribir ficheros binarios o de texto. Aqu\u00ed veremos las principales formas y las diferencias entre ellas para que puedas elegir la mejor seg\u00fan tu caso.</p>"},{"location":"ud1/binaryfiles/#escribir-en-un-fichero-con-files","title":"\ud83d\udce4 Escribir en un fichero con <code>Files</code>","text":""},{"location":"ud1/binaryfiles/#1-fileswritepath-path-byte-bytes-todo-el-contenido-de-golpe","title":"1. <code>Files.write(Path path, byte[] bytes)</code> (todo el contenido de golpe)","text":"<p>Escribe todos los bytes en un fichero. Sobrescribe si ya existe el fichero.</p> <pre><code>Path salida = Paths.get(\"salida.bin\");\ntry {\nbyte[] datos = {10, 20, 30, 40, 50};\nFiles.write(salida, datos);\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>\u2705 Muy simple</li> <li>\u26a0\ufe0f Sobrescribe el fichero por defecto</li> </ul>"},{"location":"ud1/binaryfiles/#3-fileswritepath-path-byte-bytes-openoption","title":"3. <code>Files.write(Path path, byte[] bytes, OpenOption...)</code>","text":"<p>Permite modificar el comportamiento de la escritura. Por ejemplo, al usar la opci\u00f3n <code>StandardOpenOption.APPEND</code> se a\u00f1ade al final y no sobrescribe el fichero:</p> <pre><code>Files.write(Paths.get(\"datos.log\"), datos, StandardOpenOption.APPEND);\n</code></pre> <ul> <li>\u2705 Puedes a\u00f1adir <code>StandardOpenOption.APPEND</code>, <code>CREATE</code>, <code>TRUNCATE_EXISTING</code>, etc.</li> <li>\u2705 Ideal para logs u operaciones controladas</li> </ul>"},{"location":"ud1/binaryfiles/#leer-desde-un-fichero-con-files","title":"\ud83d\udce5 Leer desde un fichero con <code>Files</code>","text":""},{"location":"ud1/binaryfiles/#1-filesreadallbytespath-path-todo-el-contenido-de-golpe","title":"1. <code>Files.readAllBytes(Path path)</code> (todo el contenido de golpe)","text":"<p>Lee el contenido del fichero como un array de bytes.</p> <pre><code>Path ruta = Paths.get(\"datos.bin\");\ntry {\nbyte[] contenido = Files.readAllBytes(ruta);\nSystem.out.println(\"Tama\u00f1o: \" + contenido.length);\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>\u2705 Ideal para ficheros peque\u00f1os o medianos</li> <li>\u26a0\ufe0f Carga todo el archivo a memoria</li> </ul> <p>Warning</p> <p><code>Files.readAllBytes()</code> y <code>Files.write()</code> no necesitan el uso de try-with-resources, internamente estas funciones abren y cierran autom\u00e1ticamente el recurso durante la operaci\u00f3n. Pero s\u00ed debes capturar la excepci\u00f3n <code>IOException</code>, ya que puede producirse si el archivo no existe, no hay permisos, etc.</p>"},{"location":"ud1/binaryfiles/#tabla-resumen-que-clasemetodo-usar-segun-la-situacion","title":"\ud83e\udde0 Tabla resumen: \u00bfQu\u00e9 clase/m\u00e9todo usar seg\u00fan la situaci\u00f3n?","text":"Herramienta \u00bfCu\u00e1ndo usarla? \u00bfBuffer incluido? \u00bfRequiere cerrar? Comentario \u00fatil <code>BufferedInputStream</code> / <code>BufferedOutputStream</code> Cuando necesitas rendimiento en lectura/escritura binaria byte a byte. \u2705 S\u00ed \u2705 S\u00ed \u00datil para ficheros grandes y lectura frecuente. <code>FileInputStream</code> / <code>FileOutputStream</code> Para acceso b\u00e1sico y directo a bytes. \u274c No \u2705 S\u00ed Bajo nivel, necesita envolverse si quieres buffer. <code>Files.readAllBytes()</code> Lectura r\u00e1pida de archivos binarios peque\u00f1os/medianos. \u274c No \u274c No Carga todo el archivo a memoria. <code>Files.write(byte[])</code> Escritura sencilla y r\u00e1pida de arrays de bytes."},{"location":"ud1/binaryfiles/#conclusion","title":"\u2705 Conclusi\u00f3n","text":"<ul> <li>Usa <code>BufferedInputStream</code> y <code>BufferedOutputStream</code> si vas a leer o escribir muchos datos en bucle.</li> <li>No hace falta usar buffer si usas m\u00e9todos como <code>Files.readAllBytes()</code> o <code>Files.write()</code>, porque ya internamente usan buffers.</li> <li>Siempre cierra bien los recursos con <code>try-with-resources</code>.</li> </ul>"},{"location":"ud1/characterfiles/","title":"\ud83d\udcdd Operaciones con ficheros de caracteres en Java","text":"<p>Los ficheros de caracteres almacenan datos en formato de texto, codificados habitualmente en UTF-8. Son los m\u00e1s usados cuando trabajamos con logs, ficheros de configuraci\u00f3n, resultados de programas, etc.</p> <p>Para trabajar con ellos, utilizamos flujos de caracteres (character streams), en lugar de flujos binarios.</p>"},{"location":"ud1/characterfiles/#clases-principales-para-flujos-de-caracteres-javaio","title":"\u270d\ufe0f Clases principales para flujos de caracteres (<code>java.io</code>)","text":"Operaci\u00f3n Clase usada Descripci\u00f3n Lectura <code>FileReader</code> Lee caracteres desde un fichero Escritura <code>FileWriter</code> Escribe caracteres en un fichero Lectura con buffer <code>BufferedReader</code> Mejora el rendimiento al leer texto Escritura con buffer <code>BufferedWriter</code> Escribe texto m\u00e1s r\u00e1pidamente Escritura formateada <code>PrintWriter</code> Para escribir texto formateado (print, println)"},{"location":"ud1/characterfiles/#operaciones-con-javaio","title":"\ud83d\uddc2\ufe0f Operaciones con <code>java.io</code>","text":""},{"location":"ud1/characterfiles/#lectura-de-texto-javaio","title":"\ud83d\udce5 Lectura de texto (<code>java.io</code>)","text":""},{"location":"ud1/characterfiles/#1-filereader-sin-buffer","title":"1. <code>FileReader</code> (sin buffer)","text":"<pre><code>try (FileReader fr = new FileReader(\"entrada.txt\")) {\nint c;\nwhile ((c = fr.read()) != -1) {\nSystem.out.print((char) c);\n}\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>\u274c Lento para ficheros grandes.</li> <li>\u2705 Adecuado para ejemplos sencillos o pruebas.</li> </ul>"},{"location":"ud1/characterfiles/#2-bufferedreader-lectura-eficiente","title":"2. <code>BufferedReader</code> (lectura eficiente)","text":"<pre><code>try (BufferedReader br = new BufferedReader(new FileReader(\"entrada.txt\"))) {\nString linea;\nwhile ((linea = br.readLine()) != null) {\nSystem.out.println(linea);\n}\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>\u2705 Muy eficiente</li> <li>\u2705 Ideal para lectura l\u00ednea a l\u00ednea</li> </ul>"},{"location":"ud1/characterfiles/#escritura-de-texto-javaio","title":"\u270d\ufe0f Escritura de texto (<code>java.io</code>)","text":""},{"location":"ud1/characterfiles/#1-filewriter","title":"1. <code>FileWriter</code>","text":"<pre><code>try (FileWriter fw = new FileWriter(\"salida.txt\")) {\nfw.write(\"Hola mundo\\n\");\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>\u274c Sin b\u00fafer, menos eficiente</li> </ul>"},{"location":"ud1/characterfiles/#2-bufferedwriter","title":"2. <code>BufferedWriter</code>","text":"<pre><code>try (BufferedWriter bw = new BufferedWriter(new FileWriter(\"salida.txt\"))) {\nbw.write(\"Hola mundo\");\nbw.newLine();\nbw.write(\"Otra l\u00ednea\");\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>\u2705 Escritura m\u00e1s r\u00e1pida y controlada</li> </ul>"},{"location":"ud1/characterfiles/#3-printwriter","title":"3. <code>PrintWriter</code>","text":"<pre><code>try (PrintWriter pw = new PrintWriter(\"log.txt\")) {\npw.println(\"Inicio del log\");\npw.printf(\"Valor: %.2f\", 12.345);\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>\u2705 Permite formateo avanzado de texto</li> </ul>"},{"location":"ud1/characterfiles/#operaciones-con-javaniofilefiles","title":"\ud83d\uddc2\ufe0f Operaciones con <code>java.nio.file.Files</code>","text":""},{"location":"ud1/characterfiles/#lectura-de-texto-javanio","title":"\ud83d\udce5 Lectura de texto (<code>java.nio</code>)","text":""},{"location":"ud1/characterfiles/#1-filesreadalllines","title":"1. <code>Files.readAllLines()</code>","text":"<pre><code>Path ruta = Paths.get(\"entrada.txt\");\nList&lt;String&gt; lineas = Files.readAllLines(ruta);\n</code></pre> <ul> <li>\u2705 Muy c\u00f3modo para archivos peque\u00f1os o medianos</li> <li>\u26a0\ufe0f Carga todo a memoria</li> </ul>"},{"location":"ud1/characterfiles/#2-fileslines-stream","title":"2. <code>Files.lines()</code> (stream)","text":"<p>Devuelve un Stream de l\u00edneas, \u00fatil para procesar ficheros grandes.</p> <pre><code>try (Stream&lt;String&gt; lineas = Files.lines(Paths.get(\"entrada.txt\"))) {\nlineas.forEach(System.out::println);\n}\n</code></pre> <ul> <li>\u2705 No carga todo en memoria: lectura perezosa (lazy), ideal para ficheros grandes</li> <li>\u2705 Puedes usar operaciones con Stream (<code>filter</code>, <code>map</code>, etc.)</li> <li>\u2705 Permite filtros y transformaciones</li> <li>\u26a0\ufe0f Necesita <code>try-with-resources</code> porque abre un recurso</li> </ul>"},{"location":"ud1/characterfiles/#3-filesreadstring-java-11","title":"3. <code>Files.readString()</code> (Java 11+)","text":"<pre><code>try {\nString contenido = Files.readString(Paths.get(\"entrada.txt\"));\nSystem.out.println(contenido);\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>\u2705 Ideal si necesitas todo el contenido como una sola cadena</li> <li>\u2705 Muy simple y directo</li> </ul>"},{"location":"ud1/characterfiles/#4-filesnewbufferedreader","title":"4. <code>Files.newBufferedReader()</code>","text":"<pre><code>try (BufferedReader br = Files.newBufferedReader(Paths.get(\"entrada.txt\"))) {\nString linea;\nwhile ((linea = br.readLine()) != null) {\nSystem.out.println(linea);\n}\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>\u2705 Lectura eficiente sin necesidad de envolver <code>FileReader</code></li> <li>\u2705 Permite pasar <code>Charset</code> como segundo argumento opcional, lo cual es \u00fatil si quieres controlar la codificaci\u00f3n del texto (por ejemplo, UTF-8, ISO-8859-1, etc.).</li> </ul>"},{"location":"ud1/characterfiles/#escritura-de-texto-javanio","title":"\u270d\ufe0f Escritura de texto (<code>java.nio</code>)","text":""},{"location":"ud1/characterfiles/#1-fileswriteliststring","title":"1. <code>Files.write(List&lt;String&gt;)</code>","text":"<pre><code>List&lt;String&gt; contenido = List.of(\"L\u00ednea 1\", \"L\u00ednea 2\");\nFiles.write(Paths.get(\"salida.txt\"), contenido);\n</code></pre> <ul> <li>\u2705 F\u00e1cil de usar, sobrescribe por defecto</li> <li>\u2705 Codificaci\u00f3n UTF-8 por defecto</li> </ul>"},{"location":"ud1/characterfiles/#2-fileswritestring-java-11","title":"2. <code>Files.writeString()</code> (Java 11+)","text":"<pre><code>try {\nFiles.writeString(Paths.get(\"salida.txt\"), \"Texto de ejemplo\");\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>\u2705 Muy c\u00f3modo para una sola cadena</li> <li>\u2705 Puedes pasar un <code>Charset</code></li> </ul>"},{"location":"ud1/characterfiles/#3-filesnewbufferedwriter","title":"3. <code>Files.newBufferedWriter()</code>","text":"<pre><code>try (BufferedWriter bw = Files.newBufferedWriter(Paths.get(\"salida.txt\"))) {\nbw.write(\"Primera l\u00ednea\\nSegunda l\u00ednea\");\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>\u2705 Similar a <code>BufferedWriter</code>, pero m\u00e1s moderno y flexible</li> <li>\u2705 Permite pasar <code>Charset</code> como segundo argumento opcional, lo cual es \u00fatil si quieres controlar la codificaci\u00f3n del texto (por ejemplo, UTF-8, ISO-8859-1, etc.).</li> </ul>"},{"location":"ud1/characterfiles/#tabla-resumen-que-clase-usar-segun-la-situacion","title":"\ud83e\udde0 Tabla resumen: \u00bfQu\u00e9 clase usar seg\u00fan la situaci\u00f3n?","text":"Herramienta \u00bfCu\u00e1ndo usarla? \u00bfBuffer incluido? \u00bfRequiere cerrar? Comentario <code>BufferedReader</code> / <code>BufferedWriter</code> Lectura/escritura eficiente de texto l\u00ednea a l\u00ednea \u2705 S\u00ed \u2705 S\u00ed Ideal para logs o lectura l\u00ednea a l\u00ednea <code>PrintWriter</code> Cuando necesitas imprimir texto con formato \u2705 S\u00ed \u2705 S\u00ed Ofrece m\u00e9todos print/println/printf <code>FileReader</code> / <code>FileWriter</code> Acceso directo a caracteres, sin buffer \u274c No \u2705 S\u00ed Puede ser ineficiente si no se envuelve <code>Files.readAllLines()</code> Lectura sencilla si el archivo es peque\u00f1o o mediano \u274c No \u274c No Devuelve <code>List&lt;String&gt;</code> <code>Files.lines()</code> Lectura de grandes archivos como <code>Stream&lt;String&gt;</code> \u2705 S\u00ed \u2705 S\u00ed Lectura perezosa, se debe cerrar el stream <code>Files.readString()</code> Lectura completa como cadena (Java 11+) \u274c No \u274c No Muy c\u00f3modo si necesitas todo el texto <code>Files.newBufferedReader()</code> Lectura eficiente con Charset opcional \u2705 S\u00ed \u2705 S\u00ed Alternativa moderna a <code>BufferedReader</code> <code>Files.write(List)</code> Escritura r\u00e1pida de texto si ya tienes las l\u00edneas \u274c No \u274c No Simple y c\u00f3modo <code>Files.writeString()</code> Escritura de cadena completa (Java 11+) \u274c No \u274c No Muy directo y moderno <code>Files.newBufferedWriter()</code> Escritura eficiente y configurable \u2705 S\u00ed \u2705 S\u00ed Permite especificar codificaci\u00f3n"},{"location":"ud1/characterfiles/#recomendaciones","title":"\u2705 Recomendaciones","text":"<ul> <li>Usa <code>BufferedReader</code> / <code>BufferedWriter</code> cuando leas o escribas muchas l\u00edneas.</li> <li>Usa <code>Files.readAllLines()</code> o <code>Files.write()</code> para tareas sencillas y ficheros peque\u00f1os.</li> <li>Usa <code>Files.lines()</code> para procesar ficheros grandes sin cargarlos enteros a memoria.</li> <li>Usa <code>PrintWriter</code> si necesitas formatear tu salida con precisi\u00f3n.</li> <li>Usa <code>Files.readString()</code> y <code>Files.writeString()</code> si trabajas con cadenas completas (Java 11+).</li> <li>Usa <code>Files.newBufferedReader()</code> y <code>Files.newBufferedWriter()</code> si quieres un enfoque moderno con control de codificaci\u00f3n.</li> </ul>"},{"location":"ud1/filevsfiles/","title":"\ud83d\udcc1 Gesti\u00f3n de ficheros con Java","text":""},{"location":"ud1/filevsfiles/#ficheros","title":"Ficheros","text":"<p>Un fichero es un conjunto l\u00f3gico de informaci\u00f3n o de datos que se designa con un nombre y se configura como una unidad aut\u00f3noma completa para el sistema o el usuario. Un archivo o fichero inform\u00e1tico es un conjunto de bits que son almacenados en un dispositivo. Para poder acceder a ellos haremos uso de una ruta (path) ya sea relativa o absoluta.</p> <p></p>"},{"location":"ud1/filevsfiles/#javaio-vs-javanio","title":"\ud83d\udd70\ufe0f <code>java.io</code> vs <code>java.nio</code>","text":"<p>Java ofrece varias formas de trabajar con archivos y directorios. A lo largo del tiempo, el lenguaje ha ido evolucionando:</p> <ul> <li> <p><code>java.io</code> fue la primera API de entrada/salida. Apareci\u00f3 con Java 1.0 (en 1996) y ofrec\u00eda clases como <code>File</code>, <code>InputStream</code>, <code>OutputStream</code>, <code>Reader</code>, <code>Writer</code>, etc. Permit\u00eda hacer operaciones b\u00e1sicas, pero de forma limitada y poco robusta.</p> </li> <li> <p><code>java.nio</code> (New Input/Output) se introdujo en Java 1.4 (2002), y se ampli\u00f3 con el paquete <code>java.nio.file</code> en Java 7 (2011). Esta nueva API ofrece clases modernas como <code>Path</code>, <code>Files</code> o <code>DirectoryStream</code>, y un enfoque m\u00e1s seguro y potente para trabajar con el sistema de archivos.</p> </li> </ul>"},{"location":"ud1/filevsfiles/#introduccion-al-sistema-de-archivos-en-java","title":"\ud83e\udded Introducci\u00f3n al sistema de archivos en Java","text":"<p>En Java existen dos formas principales de trabajar con archivos y carpetas:</p> <ul> <li><code>java.io.File</code>: fue la primera API que ofrec\u00eda funciones b\u00e1sicas para trabajar con el sistema de archivos.</li> <li><code>java.nio.file</code>: introducida en Java 7, es m\u00e1s moderna, potente y segura.</li> </ul>"},{"location":"ud1/filevsfiles/#cual-usar","title":"\u26a0\ufe0f \u00bfCu\u00e1l usar?","text":"<p>Aunque <code>java.io.File</code> a\u00fan funciona, tiene muchas limitaciones. Por eso recomendamos usar <code>java.nio.file</code> siempre que sea posible.</p>"},{"location":"ud1/filevsfiles/#por-que-usar-javaniofile-hoy","title":"\u2705 \u00bfPor qu\u00e9 usar <code>java.nio.file</code> hoy?","text":"<ul> <li>Mejor gesti\u00f3n de errores (lanzando excepciones con mensajes \u00fatiles)</li> <li>Soporte para rutas absolutas, relativas y enlaces simb\u00f3licos</li> <li>M\u00e9todos directos para copiar, mover, borrar o leer archivos</li> <li>M\u00e1s control y modularidad</li> </ul> <p>En esta unidad aprender\u00e1s directamente a usar <code>java.nio.file</code>, pero tambi\u00e9n conocer\u00e1s brevemente las limitaciones de <code>java.io.File</code> para que puedas comparar y entender por qu\u00e9 hoy se considera una API anticuada.</p>"},{"location":"ud1/filevsfiles/#comparativa-entre-javaiofile-y-javaniofile","title":"\ud83c\udd9a Comparativa entre <code>java.io.File</code> y <code>java.nio.file</code>","text":"Funcionalidad <code>java.io.File</code> (limitada) <code>java.nio.file</code> (moderna) Crear archivo <code>file.createNewFile()</code>\u274c Devuelve <code>false</code>, sin detalles <code>Files.createFile(path)</code>\u2705 Lanza excepci\u00f3n \u00fatil Comprobar si existe <code>file.exists()</code> <code>Files.exists(path)</code> Crear directorio <code>file.mkdir()</code> <code>Files.createDirectory(path)</code> Listar archivos <code>file.listFiles()</code>\u274c Devuelve <code>null</code> si falla <code>DirectoryStream&lt;Path&gt;</code>\u2705 M\u00e1s controlado Eliminar archivo <code>file.delete()</code>\u274c Devuelve <code>false</code> <code>Files.delete(path)</code>\u2705 Con control de errores Copiar/Mover archivos \u274c No se puede directamente \u2705 <code>Files.copy()</code>, <code>Files.move()</code> Leer archivo completo \u274c Necesita bucles y buffers \u2705 <code>Files.readAllLines(path)</code> Manejo de errores \u274c Poca informaci\u00f3n \u2705 Lanza excepciones claras"},{"location":"ud1/filevsfiles/#que-hay-dentro-de-javaio","title":"\ud83d\udcc2 \u00bfQu\u00e9 hay dentro de <code>java.io</code>?","text":"<p>El paquete <code>java.io</code> es uno de los m\u00e1s antiguos de Java, e incluye clases para:</p>"},{"location":"ud1/filevsfiles/#1-entradasalida-en-archivos","title":"1. Entrada/salida en archivos","text":"<ul> <li><code>File</code> \u2192 representa rutas de archivos/directorios</li> <li><code>FileInputStream</code>, <code>FileOutputStream</code> \u2192 lectura/escritura en binario</li> <li><code>FileReader</code>, <code>FileWriter</code> \u2192 lectura/escritura en texto</li> </ul>"},{"location":"ud1/filevsfiles/#2-lecturaescritura-con-buffers","title":"2. Lectura/escritura con buffers","text":"<ul> <li><code>BufferedReader</code>, <code>BufferedWriter</code></li> <li><code>BufferedInputStream</code>, <code>BufferedOutputStream</code></li> </ul>"},{"location":"ud1/filevsfiles/#3-serializacion","title":"3. Serializaci\u00f3n","text":"<ul> <li><code>ObjectInputStream</code>, <code>ObjectOutputStream</code></li> <li><code>Serializable</code> (interfaz)</li> </ul>"},{"location":"ud1/filevsfiles/#4-comunicacion-entre-procesos","title":"4. Comunicaci\u00f3n entre procesos","text":"<ul> <li><code>PipedInputStream</code>, <code>PipedOutputStream</code></li> <li><code>PipedReader</code>, <code>PipedWriter</code></li> </ul>"},{"location":"ud1/filevsfiles/#5-flujos-abstractos","title":"5. Flujos abstractos","text":"<ul> <li><code>InputStream</code>, <code>OutputStream</code> (abstractas)</li> <li><code>Reader</code>, <code>Writer</code> (abstractas)</li> </ul>"},{"location":"ud1/filevsfiles/#6-otros","title":"6. Otros","text":"<ul> <li><code>PrintWriter</code>, <code>PrintStream</code></li> <li><code>IOException</code>, <code>EOFException</code>, <code>FileNotFoundException</code>, etc.</li> </ul>"},{"location":"ud1/filevsfiles/#crear-un-objeto-file","title":"Crear un objeto File","text":"<p><pre><code>File f = new File(\"C:\\\\Users\\\\temp\\\\data.txt\");\n</code></pre> Un objeto <code>File</code> NO es el fichero real. No contiene los datos que contiene el fichero. Es un objeto que contiene m\u00e9todos que afectan a un archivo o directorio en particular y las funciones para la manipulaci\u00f3n real del archivo.</p>"},{"location":"ud1/filevsfiles/#curiosidad-didactica","title":"\ud83e\udde0 Curiosidad did\u00e1ctica","text":"<ul> <li><code>java.io</code> es una gran colecci\u00f3n de clases que forman parte del n\u00facleo de Java desde sus inicios.</li> <li>Muchas de ellas son abstractas o extensibles, pensadas para que puedas combinarlas (por ejemplo: envolver un <code>FileReader</code> con un <code>BufferedReader</code>).</li> <li>Aunque hoy en d\u00eda muchas tareas se pueden hacer mejor con <code>java.nio</code>, algunas de estas clases a\u00fan tienen utilidad complementaria, sobre todo en flujos de texto o para serializaci\u00f3n b\u00e1sica.</li> </ul>"},{"location":"ud1/filevsfiles/#que-hay-dentro-de-javaniofile","title":"\ud83d\udcc2 \u00bfQu\u00e9 hay dentro de <code>java.nio.file</code>?","text":"<p>El paquete <code>java.nio.file</code> fue introducido en Java 7 y es parte de la API moderna para trabajar con rutas, archivos y directorios de forma segura y eficiente.</p>"},{"location":"ud1/filevsfiles/#clases-principales","title":"\ud83d\udd27 Clases principales","text":"<ul> <li><code>Path</code>   Representa una ruta (ya sea de un archivo o un directorio) de forma independiente del sistema operativo. Ejemplo:</li> </ul> <pre><code>Path ruta = Path.of(\"archivos/ejemplo.txt\");\n</code></pre> <ul> <li> <p><code>Paths</code>   Clase auxiliar que se usa para construir objetos <code>Path</code> a partir de una cadena de texto.</p> </li> <li> <p><code>Files</code>   Clase con m\u00e9todos est\u00e1ticos para operar directamente sobre archivos y carpetas: crear, borrar, copiar, mover, leer y escribir.</p> </li> <li> <p><code>DirectoryStream</code>   Permite recorrer el contenido de un directorio como si fuera una colecci\u00f3n. Es seguro y compatible con <code>try-with-resources</code>.</p> </li> </ul>"},{"location":"ud1/filevsfiles/#operaciones-basicas-con-ficheros","title":"\ud83d\udee0\ufe0f Operaciones b\u00e1sicas con ficheros","text":"<ul> <li>Crear un objeto Path que representa la ruta relativa al fichero nota.txt, dentro del directorio documentos. Si nota.txt no existe no falla, Paths.get(...) solo crea un objeto Path, es decir, una representaci\u00f3n en memoria de una ruta. No comprueba si existe ni intenta acceder al fichero. <pre><code>Path archivo = Paths.get(\"documentos/nota.txt\");\n</code></pre></li> </ul> <p>Warning</p> <p>\u2757Importante: Esto NO crea el fichero f\u00edsicamente. Solo est\u00e1s creando una referencia l\u00f3gica en Java que apunta a esa ruta.</p> <ul> <li>Comprobar si existe un fichero:</li> </ul> <pre><code>boolean exists = Files.exists(archivo);\n</code></pre> <ul> <li>Crear un archivo. Devuelve la ruta del fichero creado:</li> </ul> <pre><code>Path newFile = Files.createFile(archivo);\n</code></pre> <ul> <li>Borrar un fichero:</li> </ul> <pre><code>Files.delete(archivo);\n</code></pre> <ul> <li>Copiar un fichero. Devuelve la ruta del fichero copiado:</li> </ul> <pre><code>Path copiedFile = Files.copy(archivo, Paths.get(\"copia.txt\"), StandardCopyOption.REPLACE_EXISTING);\n</code></pre> <ul> <li>Mover (o renombrar) un fichero. Devuelve la ruta del fichero movido:</li> </ul> <pre><code>Path movedFile = Files.move(archivo, Paths.get(\"nuevos/nota.txt\"), StandardCopyOption.REPLACE_EXISTING);\n</code></pre> <ul> <li>Devolver el tama\u00f1o en bytes del fichero representado por Path:</li> </ul> <p><pre><code>Path path = Path.of(\"fichero.txt\");\nlong tama\u00f1o = Files.size(path);\n</code></pre> Si el path apunta a un fichero, devuelve el tama\u00f1o del contenido del fichero. Si el path apunta a un directorio, lanza una excepci\u00f3n (IOException o AccessDeniedException), ya que NO SE PUEDE MEDIR EL TAMA\u00d1O DE UN DIRECTORIO.</p>"},{"location":"ud1/filevsfiles/#operaciones-basicas-con-directorios","title":"\ud83d\udcc1 Operaciones b\u00e1sicas con directorios","text":"<ul> <li>Paths.get es un m\u00e9todo est\u00e1tico que crea un objeto de tipo Path. En este caso, crea una ruta relativa al directorio actual con el nombre \"nuevaCarpeta\".: <pre><code>Path carpeta = Paths.get(\"nuevaCarpeta\");\n</code></pre></li> </ul> <p>Warning</p> <p>\u00bfLa carpeta existe? No necesariamente. Esta l\u00ednea solo crea la representaci\u00f3n de la ruta como objeto Path, pero no crea la carpeta en el sistema de archivos.</p> <ul> <li>Crear un directorio. Devuelve la ruta del nuevo directorio creado:</li> </ul> <pre><code>Path newDir = Files.createDirectory(carpeta);\n</code></pre> <ul> <li>Crear varios directorios anidados. Devuelve la ruta del \u00faltimo directorio creado:</li> </ul> <pre><code>Path lastNewDir = Files.createDirectories(Paths.get(\"usuarios/admin/documentos\"));\n</code></pre> <p>Warning</p> <p>Crea todos los directorios necesarios en la ruta dada, si no existen. Si ya existen, NO lanza excepci\u00f3n. Si no especificas una ruta absoluta, se crean en el directorio actual. El ejemplo crear\u00e1 una ruta compuesta por 3 directorios: usuarios/ usuarios/admin/ usuarios/admin/documentos/</p> <ul> <li>Listar el contenido de un directorio. Abre un flujo (DirectoryStream) con todos los elementos (ficheros y subdirectorios) que contiene la ruta especificada. No es recursivo (no entra dentro de subdirectorios): <pre><code>try (DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(Path.of(\"/home\"))) {\nfor (Path archivo : stream) {\nSystem.out.println(archivo.getFileName());\n}\n} catch (IOException e) {\ne.printStackTrace();\n}\n</code></pre> <ul> <li>Comprobar si una ruta es un directorio:</li> </ul> <pre><code>boolean isDir = Files.isDirectory(carpeta);\n</code></pre>"},{"location":"ud1/filevsfiles/#vista-general-de-javaio","title":"\ud83d\uddbc\ufe0f Vista general de <code>java.io</code>","text":"<p>La siguiente imagen muestra la jerarqu\u00eda de clases dentro del paquete <code>java.io</code>:</p> <p></p>"},{"location":"ud1/filevsfiles/#vista-general-de-javaniofile","title":"\ud83d\uddbc\ufe0f Vista general de <code>java.nio.file</code>","text":"<p>La siguiente imagen muestra las clases m\u00e1s importantes dentro de <code>java.nio.file</code>:</p> <p></p>"},{"location":"ud1/filevsfiles/#buenas-practicas-con-javaniofile","title":"\u2705 Buenas pr\u00e1cticas con <code>java.nio.file</code>","text":"<ul> <li>Usa <code>try-catch</code> para manejar excepciones como <code>IOException</code>.</li> <li>Si abres un recurso que debe cerrarse (como un <code>DirectoryStream</code>), usa <code>try-with-resources</code>. Recursos se refiere a objetos como streams, buffers, o lectores que ocupan memoria activa del sistema operativo.</li> <li>Divide tu c\u00f3digo en m\u00e9todos peque\u00f1os y reutilizables para mantenerlo limpio.</li> <li>Comenta el c\u00f3digo si haces operaciones delicadas (como borrar o mover archivos).</li> <li>Siempre verifica si los archivos o directorios existen antes de operar sobre ellos.</li> <li>Usa REPLACE_EXISTING en copias o movimientos si quieres sobreescribir.</li> </ul>"},{"location":"ud1/io/","title":"I/O Input/Output - Entrada/Salida de la informaci\u00f3n","text":"<p>Todo dato tiene un origen de entrada o un destino de salida (convenientemente en ingl\u00e9s: I/O). Input o entrada implica leer datos de una fuente y Output o salida implica escribirlos en un destino. Un programa trabaja con datos que provienen de una entrada la cual puede ser un teclado, un archivo en disco o un socket a trav\u00e9s de la red. As\u00ed mismo un programa genera resultados envi\u00e1ndolos a una salida la cual puede ser la pantalla, un archivo en disco o un socket a trav\u00e9s de la red. En Java, la conexi\u00f3n entre un programa y un origen o destino de datos se denomina flujo (en ingl\u00e9s: stream).</p> <p></p> <p>Un flujo de entrada (input stream) maneja los datos que fluyen hacia un programa. Un flujo de salida (output stream) maneja los datos que salen de un programa.</p>"},{"location":"ud1/io/#formas-de-acceso-a-un-fichero-en-java","title":"\ud83d\udee3\ufe0f Formas de acceso a un fichero en Java","text":"<p>Java permite trabajar con ficheros de distintas formas, dependiendo de lo que queramos hacer con ellos. Las principales son:</p> Forma de acceso Descripci\u00f3n Ventajas principales Acceso secuencial Se accede al fichero de principio a fin, en orden. Simple, eficiente para leer o escribir de forma lineal. Ideal para archivos de texto. Acceso aleatorio Permite posicionarse en cualquier parte del archivo. \u00datil cuando se necesita modificar o consultar partes concretas. M\u00e1s complejo. Lectura completa en memoria Se lee todo el contenido del archivo y se guarda en una estructura (por ejemplo, una lista de l\u00edneas). Muy c\u00f3modo para trabajar, pero no recomendado si el archivo es muy grande."},{"location":"ud1/io/#que-significa-acceso-secuencial","title":"\ud83d\udcdd \u00bfQu\u00e9 significa acceso secuencial?","text":"<p>Significa que el archivo se lee o escribe de principio a fin. No se puede saltar directamente a una posici\u00f3n concreta, sino que hay que recorrerlo.</p> <p>Ejemplo: <code>BufferedReader</code>, <code>BufferedWriter</code>, <code>Files.newBufferedReader()</code>, <code>Files.write()</code>...</p>"},{"location":"ud1/io/#y-acceso-aleatorio","title":"\ud83e\udded \u00bfY acceso aleatorio?","text":"<p>Significa que puedes moverte a cualquier parte del archivo (por ejemplo, al byte 250) y empezar a leer o escribir desde ah\u00ed.</p> <p>Ejemplo: <code>RandomAccessFile</code> (lo veremos m\u00e1s adelante).</p>"},{"location":"ud1/io/#y-leerlo-todo-de-golpe","title":"\u26a1 \u00bfY leerlo todo de golpe?","text":"<p>A veces quieres leer un archivo peque\u00f1o entero, por ejemplo:</p> <pre><code>List&lt;String&gt; lineas = Files.readAllLines(Paths.get(\"archivo.txt\"));\n</code></pre>"},{"location":"ud1/io/#tipos-de-flujos-en-java-binarios-vs-caracteres","title":"\ud83d\udd04 Tipos de flujos en Java: Binarios vs Caracteres","text":"<p>Cuando trabajamos con ficheros en Java, es importante entender qu\u00e9 tipo de datos estamos leyendo o escribiendo. Esto influye en el tipo de flujo (stream) que debemos usar. Existen dos tipos de flujos (streams) seg\u00fan el tipo de datos, flujos binarios y flujos de caracteres. </p> <p>Internamente, todos los datos consisten en patrones de bits agrupados en bytes. Entonces, l\u00f3gicamente, todos los flujos podr\u00edan llamarse \"flujos de bytes\" (byte streams). Sin embargo, los flujos destinados a bytes que representan caracteres se denominan \"flujos de caracteres\" (character streams) y todos los dem\u00e1s se denominan \"flujos de bytes\".</p> <p>Al escribir y leer datos de caracteres, \u00e9stos est\u00e1n en un formato legible para el ser humano, sin embargo, los datos binarios implican leer y escribir bytes que no son legibles si los abrimos en un editor de texto.</p>"},{"location":"ud1/io/#flujos-binarios-byte-streams","title":"\ud83d\udce6 Flujos binarios (byte streams)","text":"<ul> <li>Usados para leer o escribir datos en formato binario (im\u00e1genes, v\u00eddeos, ficheros PDF, etc.).</li> <li>No interpretan el contenido como texto, sino como bytes puros.</li> </ul> <p>Clases t\u00edpicas: - <code>InputStream</code> (abstracta)   - <code>FileInputStream</code>   - <code>BufferedInputStream</code> - <code>OutputStream</code> (abstracta)   - <code>FileOutputStream</code>   - <code>BufferedOutputStream</code></p>"},{"location":"ud1/io/#flujos-de-caracteres","title":"\ud83d\udd24 Flujos de caracteres","text":"<p>Usados para trabajar con texto (ficheros .txt, .csv, .xml...). Est\u00e1n optimizados para datos de caracteres.</p> <p>Interpretan los datos usando una codificaci\u00f3n de caracteres (como UTF-8).</p> <p>Clases t\u00edpicas: - <code>Reader</code> (abstracta)   - <code>FileReader</code>   - <code>BufferedReader</code> - <code>Writer</code> (abstracta)   - <code>FileWriter</code>   - <code>BufferedWriter</code></p> <p>La siguiente figura muestra la jerarqu\u00eda del paquete <code>java.io</code>:</p> <p></p>"},{"location":"ud1/io/#resumen-de-flujos-en-java","title":"\ud83d\udccb Resumen de flujos en Java","text":"Forma de acceso Descripci\u00f3n breve \u00bfCu\u00e1ndo usarla? Clases m\u00e1s importantes Basado en rutas (<code>File</code>, <code>Path</code>) Trabaja con rutas de ficheros y directorios, sin leer ni escribir contenido. Para comprobar si existe, crear carpetas, borrar archivos, mover, copiar... <code>File</code>, <code>Path</code>, <code>Paths</code>, <code>Files</code> Flujos binarios Trabajan con bytes. Adecuado para im\u00e1genes, audio, datos binarios sin formato. Cuando se manejan archivos no de texto o binarios puros <code>InputStream</code>, <code>OutputStream</code>, <code>FileInputStream</code>, <code>FileOutputStream</code> Flujos de caracteres Trabajan con texto. Se basan en caracteres Unicode. Lectura y escritura de archivos <code>.txt</code>, <code>.csv</code>, <code>.json</code>, etc. <code>Reader</code>, <code>Writer</code>, <code>FileReader</code>, <code>FileWriter</code>, <code>BufferedReader</code>, <code>BufferedWriter</code> NIO.2 (<code>java.nio.file</code>) API moderna desde Java 7. M\u00e1s robusta, segura, con mejor gesti\u00f3n de errores. Siempre que puedas. Sustituye a muchas tareas antiguas de <code>java.io</code> <code>Files</code>, <code>Path</code>, <code>Paths</code>, <code>DirectoryStream</code> Acceso aleatorio Permite leer y escribir en cualquier parte del archivo sin recorrerlo todo. Para editar partes espec\u00edficas de archivos grandes <code>RandomAccessFile</code>"},{"location":"ud1/trywithresources/","title":"\ud83e\udd73 try-with-resources en Java","text":"<p>La sentencia <code>try-with-resources</code> es una versi\u00f3n especial de <code>try</code> que se usa cuando trabajamos con recursos que deben cerrarse, como archivos, streams, sockets o conexiones de BD.</p> <p>\ud83e\udde0 Un recurso es cualquier objeto que necesita ser cerrado cuando ya no se usa, como un <code>FileWriter</code>, <code>Scanner</code> o <code>BufferedReader</code>, etc. La instrucci\u00f3n try-with-resources garantiza que cada recurso se cierre al final de la instrucci\u00f3n.</p>"},{"location":"ud1/trywithresources/#cuando-si-usar-try-with-resources","title":"\u2705 \u00bfCu\u00e1ndo S\u00cd usar try-with-resources?","text":"<p>Cuando trabajas con objetos que implementan <code>java.lang.AutoCloseable</code>. Esto incluye todos los objetos que implementan o extienden de la interfaz <code>java.io.Closeable</code>.</p> <p>Al usar try-with-resources no ser\u00eda necesario realizar la sentencia <code>recurso.close()</code>. \ud83d\udd12 Java se encarga de llamar autom\u00e1ticamente a <code>.close()</code> por ti cuando termina el bloque <code>try</code>, incluso si ocurre una excepci\u00f3n.</p> <p>Antes de Java SE 7 (antes de try-with-resources), se pod\u00eda usar un bloque <code>finally</code> para asegurarse de que un recurso se cerraba, independientemente de si el try generaba excepci\u00f3n o no.</p>"},{"location":"ud1/trywithresources/#ejemplo-de-clases-que-implementan-autocloseable","title":"Ejemplo de clases que implementan AutoCloseable:","text":"<ul> <li><code>BufferedReader</code></li> <li><code>BufferedWriter</code></li> <li><code>FileReader</code> / <code>FileWriter</code></li> <li><code>InputStream</code> / <code>OutputStream</code></li> <li><code>Scanner</code></li> <li><code>DirectoryStream</code></li> <li>Conexiones JDBC (<code>Connection</code>, <code>Statement</code>, <code>ResultSet</code>)</li> </ul>"},{"location":"ud1/trywithresources/#antes-de-java-7-cerrar-recursos-a-mano","title":"\ud83d\ude13 Antes de Java 7: cerrar recursos a mano","text":"<p>El siguiente ejemplo muestra c\u00f3mo se cerraban los recursos antes de que apareciera try-with-resources. Creamos el objeto <code>FileWriter</code> en la l\u00ednea 2, en vez de hacerlo en la 4 porque el <code>finally</code> de la l\u00ednea 8 se encuentra en otro scope y la variable <code>fw</code> no existe.</p> <p><pre><code>public static void main(String[] args) {\nFileWriter fw = null;\ntry {\nfw = new FileWriter(\"prueba.txt\");\nfw.write(\"Hola mundo\");\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\ntry {\nif (fw != null) {\nSystem.out.println(\"El fichero se cierra\");\nfw.close();\n}\n}catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre> \ud83d\ude44 Este enfoque es largo, propenso a errores, y puede ocultar excepciones importantes.</p> <p>Al hacer el <code>close()</code> manualmente, vemos que el c\u00f3digo queda bastante engorroso, ya que la sentencia close lanza una excepci\u00f3n que hay que capturar.</p>"},{"location":"ud1/trywithresources/#desde-java-7-try-with-resources","title":"\ud83d\ude80 Desde Java 7: try-with-resources","text":"<p>El mismo ejemplo usando try-with-resources. Vemos que el c\u00f3digo queda mucho m\u00e1s limpio y seguro \u2705:</p> <pre><code>public static void main(String[] args) {\ntry (FileWriter fw = new FileWriter(\"prueba.txt\")) {\nfw.write(\"Hola mundo\");\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n</code></pre>"},{"location":"ud1/trywithresources/#y-si-quiero-usar-mas-de-un-recurso","title":"\ud83e\uddea \u00bfY si quiero usar m\u00e1s de un recurso?","text":"<pre><code>public static void main (String[] args) throws IOException {\ntry(FileWriter fw = new FileWriter(\"prueba.txt\");\nFileWriter fw2 = new FileWriter(\"prueba2.txt\")) {\nfw.write(\"texto de prueba\");\nfw2.write(\"texto de prueba\");\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n</code></pre> <p>Nota \ud83e\udd13</p> <p>Podemos declarar varios recursos dentro de un mismo try como se ve en el ejemplo.</p>"},{"location":"ud1/trywithresources/#importante-diferencia-clave-entre-try-con-finally-y-try-with-resources","title":"\u26a0\ufe0f IMPORTANTE - Diferencia clave entre try con finally y try-with-resources \ud83e\udd14","text":"<p>Supongamos que se lanza una excepci\u00f3n dentro del bloque try y otra en el m\u00e9todo close(). \u00bfCu\u00e1l de las dos excepciones se propaga?</p>"},{"location":"ud1/trywithresources/#en-un-try-con-finally","title":"En un try con finally:","text":"<p>La excepci\u00f3n lanzada en el finally (al hacer close()) sobrescribe la excepci\u00f3n original que se lanz\u00f3 primero dentro del bloque try.</p> <p>Es decir: <pre><code>...\ntry {\nfw = new FileWriter(\"prueba.txt\");\nfw.write(\"texto de prueba\");\n} catch (IOException e) {\nSystem.out.println(\"Error al escribir o crear el fichero\");\n} finally {\ntry {\nif (fw != null) { fw.close(); }\n} catch (IOException e) {\nSystem.out.println(\"Error al cerrar el fichero\");\n}\n}\n</code></pre> \u2192 Se propagar\u00e1 solo la excepci\u00f3n del <code>close()</code>: \"Error en close\".</p> <p>La excepci\u00f3n m\u00e1s importante (la que caus\u00f3 el fallo original) se pierde.</p>"},{"location":"ud1/trywithresources/#en-try-with-resources","title":"En <code>try-with-resources</code>:","text":"<p>Java mantiene la excepci\u00f3n original (la del bloque <code>try</code>) y a\u00f1ade la del bloque close como excepci\u00f3n suprimida.</p> <pre><code>try (FileWriter fw = new FileWriter(\"prueba.txt\")) {\nfw.write(\"Hola mundo\");\n} catch (IOException e) {\nSystem.out.println(\"Error al crear o escribir el fichero\");\n} // Al cerrar, tambi\u00e9n lanza IOException(\"Error en close\")  \n</code></pre> <p>\u2192 Se propagar\u00e1 la excepci\u00f3n original generada en el try (<code>Error al crear o escribir el fichero</code>), y la del <code>close()</code> quedar\u00e1 registrada como \"suppressed exception\".</p> <p>\u2705 Esto permite que la excepci\u00f3n m\u00e1s relevante no se pierda y que el programador pueda acceder a toda la informaci\u00f3n posible de las causas de error.</p> <p>!!! important \"Conclusi\u00f3n clave\" - <code>try</code> con <code>finally</code>: se pierde la excepci\u00f3n original si <code>close()</code> lanza otra. - <code>try-with-resources</code>: se mantiene la excepci\u00f3n del <code>try</code> y se a\u00f1aden las suprimidas.</p>"},{"location":"ud1/trywithresources/#por-que-debemos-cerrar-los-recursos-en-java","title":"\ud83e\udde8 \u00bfPor qu\u00e9 debemos cerrar los recursos en Java?","text":"<p>Cerrar los recursos en Java (como archivos, streams, sockets o conexiones a bases de datos) es fundamental por varias razones:</p>"},{"location":"ud1/trywithresources/#1-fugas-de-memoria-o-recursos","title":"1. Fugas de memoria o recursos","text":"<p>Cuando abres un recurso y no lo cierras, ese recurso permanece activo en el sistema (por ejemplo, un archivo abierto o una conexi\u00f3n sin liberar).</p> <ul> <li>Puede agotar el n\u00famero de descriptores de archivo del sistema operativo.</li> <li>En programas grandes o de larga duraci\u00f3n, esto provoca que se queden sin recursos disponibles y empiecen a fallar.</li> </ul> <p>Ejemplo real: abrir muchos archivos sin cerrar \u2192 <code>java.io.IOException: Too many open files</code></p>"},{"location":"ud1/trywithresources/#2-bloqueos-de-archivos","title":"2. Bloqueos de archivos","text":"<p>Si un archivo est\u00e1 abierto por un proceso y no se cierra, otro proceso o hilo no podr\u00e1 acceder a \u00e9l correctamente.</p> <ul> <li>En algunos sistemas operativos (como Windows), no puedes volver a abrir el archivo si sigue abierto.</li> <li>Esto bloquea escritura, renombrado o borrado.</li> </ul>"},{"location":"ud1/trywithresources/#3-datos-no-guardados-buffers-sin-volcar","title":"3. Datos no guardados (buffers sin volcar)","text":"<p>Muchos recursos (como <code>BufferedWriter</code> o <code>FileOutputStream</code>) usan buffers de memoria.</p> <ul> <li>Si no cierras el recurso, el buffer podr\u00eda no volcarse al disco.</li> <li>Resultado: el archivo se queda incompleto o vac\u00edo.</li> </ul>"},{"location":"ud1/trywithresources/#4-conexiones-a-bases-de-datos-colapsadas","title":"4. Conexiones a bases de datos colapsadas","text":"<p>Si no cierras una conexi\u00f3n JDBC (<code>Connection</code>), esta sigue ocupando espacio en el pool de conexiones.</p> <ul> <li>Al poco tiempo, ya no se pueden abrir m\u00e1s conexiones.</li> <li>El sistema queda bloqueado hasta reiniciar o liberar manualmente.</li> </ul>"},{"location":"ud1/trywithresources/#en-resumen","title":"\ud83e\udde0 En resumen","text":"Problema si no cierras Consecuencia Fugas de recursos Memoria llena, errores Archivos bloqueados No se pueden usar Datos sin guardar Archivos corruptos Conexiones abiertas Fallos de conexi\u00f3n <p>Por eso, try-with-resources es la forma recomendada para evitar estos problemas autom\u00e1ticamente.</p>"},{"location":"ud2/21persistencia/","title":"\ud83d\udcbe Persistencia de la informaci\u00f3n","text":"<p>La persistencia es la capacidad de guardar el estado de un objeto en alg\u00fan tipo de almacenamiento, para poder restaurarlo en alg\u00fan momento posteriormente.</p> <p></p> <p>Hoy en d\u00eda, la mayor\u00eda de aplicaciones inform\u00e1ticas necesitan almacenar y gestionar gran cantidad de datos.</p> <p>Esos datos, se suelen guardar en bases de datos relacionales, ya que \u00e9stas son las m\u00e1s extendidas actualmente.</p>"},{"location":"ud2/21persistencia/#tipos-de-bases-de-datos","title":"Tipos de bases de datos","text":"<p>Una base de datos es una herramienta que recopila datos, los organiza y los relaciona para que se pueda hacer una r\u00e1pida b\u00fasqueda y recuperar con ayuda de un ordenador. Hoy en d\u00eda, las bases de datos tambi\u00e9n sirven para desarrollar an\u00e1lisis. Las bases de datos m\u00e1s modernas tienen motores espec\u00edficos para sacar informes de datos complejos.</p> <p>Adem\u00e1s, es importante saber que hay varios tipos de base de datos: la relacional; la distribuida; NoSQL; orientada a objetos; y, gr\u00e1ficas. La existencia de estas diversas bases de datos se debe a la variedad de forma de trabajo que se requiere de ellas.</p> <p>Las bases de datos relacionales representan la informaci\u00f3n en forma de tablas, con filas y columnas que se relacionan mediante campos clave. Adem\u00e1s se trabaja con el lenguaje est\u00e1ndar conocido como SQL, para poder realizar las consultas que deseemos a la base de datos.</p> <p>El sistema gestor de bases de datos, en ingl\u00e9s conocido como: Database Management System (DBMS), gestiona el modo en que los datos se almacenan, mantienen y recuperan.</p> <p>En el caso de una base de datos relacional, el sistema gestor de base de datos se denomina: Relational Database Management System (RDBMS).</p> <p></p> <p>Tradicionalmente, la programaci\u00f3n de bases de datos ha sido un caos debido a la gran cantidad de productos de bases de datos en el mercado, cada uno con sus caracter\u00edsticas y lenguaje diferente.</p>"},{"location":"ud2/22mapeo/","title":"\u26d3\ufe0f Desfase objeto - relacional","text":"<p>Las bases de datos relacionales no est\u00e1n dise\u00f1adas para almacenar objetos, ya que existe un desfase entre las construcciones t\u00edpicas que proporciona el modelo relacional y las proporcionadas por la programaci\u00f3n basada en objetos.</p> <p>El desfase objeto-relacional consiste en la diferencia de aspectos que existen entre la programaci\u00f3n orientada a objetos y la base de datos.</p> <p>Hay que recordar que el modelo relacional trata con relaciones y conjuntos y que, en las BD relacionales tenemos reglas de integridad:</p> <ul> <li>Todas las tablas deben tener una clave primaria</li> <li>La clave primaria tiene que ser \u00fanica y no puede ser NULL</li> <li>Para relacionar dos tablas usamos una foreign key</li> </ul> <p>Sin embargo, el modelo de Programaci\u00f3n Orientada a Objetos trata con objetos y las asociaciones entre ellos. Por esta raz\u00f3n, el problema entre estos dos modelos surge en el momento de querer persistir los objetos.</p>"},{"location":"ud2/22mapeo/#mapeo-objeto-relacional","title":"Mapeo objeto - relacional","text":"<p>Al trabajar con POO y BDR tenemos que estar continuamente gestionando los objetos para escribir la sentencia SQL, o recolectar todos los atributos para componer un objeto cuando leemos informaci\u00f3n desde la base de datos.</p> <p>A este conjunto de t\u00e9cnicas se le conoce como mapeo objeto-relacional. Y puede hacerse ayud\u00e1ndose de alguna herramienta o bien manualmente por el programador.</p> <p></p>"},{"location":"ud2/23conectores/","title":"\u2699\ufe0f Conectores o drivers","text":"<p>Un conector o driver es un mecanismo que permite a un lenguaje de programaci\u00f3n conectarse, y trabajar, contra una base de datos. Se encarga de mantener el di\u00e1logo con la base de datos, para poder llevar a cabo el acceso y manipulaci\u00f3n de los datos.</p> <p>Algunos de los m\u00e1s conocidos son:</p> <ul> <li> <p>ODBC (Open Database Connectivity). Es un est\u00e1ndar viejo. Esta tecnolog\u00eda proporciona una interfaz com\u00fan para tener acceso a bases de datos SQL heterog\u00e9neas. ODBC est\u00e1 basado en SQL (Structured Query Language) como un est\u00e1ndar para tener acceso a datos. ODBC permite la conexi\u00f3n f\u00e1cil desde varios lenguajes de programaci\u00f3n y se utiliza mucho en el entorno Windows.</p> </li> <li> <p>JDBC (Java Data Base Connectivity).</p> </li> </ul> <p>En este curso, nos vamos a centrar en JDBC, puesto que, desde el punto de vista de Java, es una de las tecnolog\u00edas m\u00e1s importantes de conectividad a la base de datos. Y, adem\u00e1s, Java 8 ha eliminado el puente JDBC-ODBC, lo que significa que los controladores ODBC de Microsoft ya no funcionan.</p>"},{"location":"ud2/23conectores/#jdbc","title":"JDBC","text":"<p>Casi de forma simult\u00e1nea a ODBC, la empresa Sun Microsystems, en 1997 sac\u00f3 a la luz JDBC, un API conector de bases de datos, implementado espec\u00edficamente para usar con el lenguaje Java. Se trata de un API bastante similar a ODBC en cuanto a funcionalidad, pero adaptado a las especificidades de Java. Es decir, la funcionalidad se encuentra capsulada en clases (ya que Java es un lenguaje totalmente orientado a objetos) y, adem\u00e1s, no depende de ninguna plataforma espec\u00edfica, de acuerdo con la caracter\u00edstica multiplataforma defendida por Java.</p> <p>Es una API que permite la ejecuci\u00f3n de operaciones contra una base de datos desde Java independientemente del sistema operativo donde se ejecute o de la base de datos a la cual se acceda. Podemos pensar en JDBC como un intermediario que se encuentra entre una aplicaci\u00f3n Java y una fuente de datos.</p> <p>Para usar una fuente de datos particular en una aplicaci\u00f3n, necesitamos el controlador JDBC para la fuente de datos. Por ejemplo, para acceder a una BD SQLite desde una aplicaci\u00f3n, necesitamos un controlador JDBC de SQLite.</p> <p></p> <p>El driver o controlador es simplemente una biblioteca Java que contiene clases que implementan la API de JDBC. Como todos los drivers JDBC tienen que implementar la misma interfaz, es muy sencillo cambiar de una fuente de datos a otra.</p> <p>Es importante destacar tambi\u00e9n que JDBC no exige ninguna instalaci\u00f3n, ni ning\u00fan cambio sustancial en el c\u00f3digo a la hora de utilizar uno u otro controlador. Esta caracter\u00edstica se sustenta, en primer lugar, en la utilidad de Java que permite cargar program\u00e1ticamente cualquier clase a partir de su nombre; en segundo lugar, en la funcionalidad de la clase DriverManager (de la API JDBC), que sin necesidad de indicarle el driver espec\u00edfico que hay que utilizar es capaz de encontrarlo y seleccionarlo de entre todos los que el sistema tenga cargados en memoria.</p> <p>A pesar de eso tampoco es mucho problema ya que actualmente podemos encontrar un driver JDBC para pr\u00e1cticamente cualquier SGBDR existente. El conector lo proporciona el fabricante de la base de datos o bien un tercero.</p> <p>JDBC consta de dos paquetes, java.sql and javax.sql (opcional). Las API del paquete javax.sql son necesarias cuando se trabaja con servidores de bases de datos.</p>"},{"location":"ud2/23conectores/#conexion-con-la-bbdd-desde-jdbc","title":"Conexi\u00f3n con la BBDD desde JDBC","text":"<p>Antes de empezar a desarrollar aplicaciones JDBC es necesario aseguramos que tenemos instalado el SGBD, y adem\u00e1s que tenemos acceso desde el lugar donde estemos desarrollando la aplicaci\u00f3n. Una vez verificado el sistema gestor de base de datos, ser\u00e1 necesario obtener el controlador JDBC del sistema gestor. Generalmente, cada fabricante pondr\u00e1 a disposici\u00f3n de sus usuarios los diferentes tipos de controladores que tenga para sus productos. Sea cual sea el tipo de controlador que finalmente necesita, \u00e9ste tendr\u00e1 como m\u00ednimo una biblioteca en formato .jar con todas las clases de la API JDBC. Habr\u00e1 que a\u00f1adir el archivo .jar como biblioteca de nuestra aplicaci\u00f3n.</p> <p>Para descargar el driver JDBC para MySQL podemos hacerlo desde el repositorio de Maven:</p> <p>MySQL JDBC</p>"},{"location":"ud2/23conectores/#establecimiento-y-cierre-de-conexion","title":"Establecimiento y cierre de conexi\u00f3n","text":"<p>Las clases que afectan a la gesti\u00f3n de la conexi\u00f3n con la BBDD son:</p> <ul> <li> <p><code>DriverManager</code>: esta clase se utiliza para registrar el controlador para un tipo de base de datos espec\u00edfico (por ejemplo, MySQL en este tutorial) y para establecer una conexi\u00f3n de base de datos con el servidor a trav\u00e9s de su m\u00e9todo <code>getConnection()</code>.</p> </li> <li> <p><code>Connection</code>, es una interfaz que representa una conexi\u00f3n a la base de datos establecida (sesi\u00f3n) desde la cual podemos crear declaraciones para ejecutar consultas y recuperar resultados, obtener metadatos sobre la base de datos, cerrar conexi\u00f3n, etc.Los objetos <code>Connection</code> mantendr\u00e1n la capacidad de comunicarse con el sistema gestor mientras permanezcan abiertos. Esto es, desde que se crean hasta que se cierran utilizando el m\u00e9todo close.</p> </li> </ul> <p>El objeto <code>Connection</code> est\u00e1 totalmente vinculado a una fuente de datos, por eso en pedir la conexi\u00f3n hay que especificar de qu\u00e9 fuente se trata siguiendo el protocolo JDBC e indicando la url de los datos, y en su caso el usuario y password.</p> <p>Example \ud83e\udd13</p> <ul> <li>jdbc:bbdd://server:port/schema</li> <li>jdbc:postgresql://localhost:5432/severo</li> </ul> <p>La url seguir\u00e1 el protocolo JDBC, comenzar\u00e1 siempre por la palabra jdbc seguida de dos puntos. El resto depender\u00e1 del tipo de controlador utilizado, del host donde se aloje el SGBD, del puerto que este use para escuchar las peticiones y del nombre de la base de datos o esquema con el que queremos trabajar.</p> <pre><code>import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n...\npublic static void main(String[] args) {\nString user = \"patricia\";\nString password = \"marti\";\nString url = \"jdbc:mysql://localhost/severo_ad\";\ntry (final Connection connection = DriverManager.getConnection(url, user, password)) {\nSystem.out.println(connection.getCatalog());\n} catch (SQLException ex) {\nSystem.out.println(\"SQLException: \" + ex.getMessage());\nSystem.out.println(\"SQLState: \" + ex.getSQLState());\nSystem.out.println(\"VendorError: \" + ex.getErrorCode());\n}\n}\n</code></pre>"},{"location":"ud2/23conectores/#operaciones-basicas","title":"Operaciones b\u00e1sicas","text":"<p>El API JDBC distingue dos tipos de consultas:</p> <ul> <li>Consultas: SELECT</li> <li>Actualizaciones: INSERT, UPDATE, DELETE, sentencias DDL.</li> </ul>"},{"location":"ud2/23conectores/#interfaces-y-clases-principales-de-jdbc","title":"Interfaces y clases principales de JDBC","text":"<ul> <li> <p><code>Statement</code> y <code>PreparedStatement</code>: estas interfaces se utilizan para ejecutar consultas SQL est\u00e1ticas y consultas SQL parametrizadas, respectivamente. <code>Statement</code> es la superinterfaz de la interfaz <code>PreparedStatement</code>, que se utiliza para consultas parametrizadas. Sus m\u00e9todos com\u00fanmente utilizados son:</p> <ul> <li><code>boolean execute(String sql)</code>: ejecuta una sentencia SQL general. Devuelve verdadero si la consulta devuelve un <code>ResultSet</code>, falso si la consulta devuelve un recuento de actualizaciones o no devuelve nada. Este m\u00e9todo solo se puede utilizar con una sentencia.</li> <li> <p><code>int executeUpdate(String sql)</code>: ejecuta una sentencia INSERT, UPDATE o DELETE y devuelve un conteo actualizado que indica el n\u00famero de filas afectadas (por ejemplo, 1 fila insertada, 2 filas actualizadas o 0 filas afectadas).</p> <pre><code>Statement stmt = con.createStatement();\nString q1 = \"insert into userid values (1,root,Patricia Marti)\";\nint x = stmt.executeUpdate(q1);\n</code></pre> </li> </ul> </li> <li> <p><code>ResultSet executeQuery(String sql)</code>: ejecuta una sentencia SELECT y devuelve un objeto <code>ResultSet</code> que contiene los resultados devueltos por la consulta.</p> <pre><code>Statement stmt = con.createStatement();\nString q1 = \"select * from userid where id = '\" + id + \"' AND pwd = '\" + pwd + \"'\";\nResultSet rs = stmt.executeQuery(q1);\n</code></pre> </li> <li> <p><code>ResultSet</code>: contiene los datos de la tabla devueltos por una consulta SELECT. Este objeto se usa para iterar sobre las filas en el conjunto de resultados usando el m\u00e9todo <code>next()</code>.</p> </li> </ul> <p>\ud83e\udd13 SQLException: Es la excepci\u00f3n que se lanza cuando hay alg\u00fan problema entre la base de datos y el programa Java JDBC. Contiene los siguientes m\u00e9todos:</p> <ul> <li><code>.getMessage()</code>, nos indica la descripci\u00f3n del mensaje de error.</li> <li><code>.getSQLState()</code>, devuelve un c\u00f3digo SQL est\u00e1ndar definido por ISO/ANSI y el Open Group que identifica de forma un\u00edvoca el error que se ha producido. SQLState Official</li> <li><code>.getErrorCode(</code>), es un c\u00f3digo de error que lanza la base de datos. En este caso el c\u00f3digo de error es diferente dependiendo del proveedor de base de datos que estemos utilizando.</li> <li><code>.getCause()</code>, nos devuelve una lista de objetos que han provocado el error.</li> <li><code>.getNextException()</code>, devuelve la cadena de excepciones que se ha producido. De tal manera que podemos navegar sobre ella para ver en detalle de esas excepciones.</li> </ul>"},{"location":"ud2/23conectores/#liberacion-de-recursos","title":"Liberaci\u00f3n de recursos","text":"<p>Danger \ud83d\ude2c</p> <p>Se debe cerrar expl\u00edcitamente <code>Statement</code>, <code>ResultSet</code> y <code>Connection</code> cuando ya no se necesiten, a menos que se declaren con un try-catch-with-resources.</p> <p>Las instancias de <code>Connection</code> y las de <code>Statement</code> almacenan, en memoria, mucha informaci\u00f3n relacionada con las ejecuciones realizadas. Adem\u00e1s, mientras permanecen activas mantienen en el SGBD un conjunto importante de recursos abiertos, destinados a servir de forma eficiente las peticiones de los clientes. El cierre de estos objetos permite liberar recursos tanto del cliente como del servidor.</p> <p>Aunque se haya cerrado la conexi\u00f3n, los objetos <code>Statements</code> que no se hab\u00edan cerrado expresamente permanecen m\u00e1s tiempo en memoria que los objetos cerrados previamente, ya que el garbage collector de Java deber\u00e1 hacer m\u00e1s comprobaciones para asegurar que ya no dispone de dependencias ni internas ni externas y se puede eliminar. Es por ello que se recomienda proceder siempre a cerrarlo manualmente utilizando el m\u00e9todo <code>close()</code>. El cierre de los objetos <code>Statement</code> asegura la liberaci\u00f3n inmediata de los recursos y la anulaci\u00f3n de las dependencias.</p> <p>Si en un mismo m\u00e9todo queremos cerrar un objeto <code>Statement</code> y <code>Connection</code>, lo haremos siguiendo estos pasos:</p> <ol> <li> <p>Cerramos el <code>Statement</code> y</p> </li> <li> <p>la instancia <code>Connection</code>.</p> </li> </ol> <p>Failure \ud83d\ude35\u200d\ud83d\udcab</p> <p>Si lo hici\u00e9ramos al rev\u00e9s, cuando intent\u00e1ramos cerrar el <code>Statement</code> nos saltar\u00eda una excepci\u00f3n de tipo <code>SQLException</code>, ya que el cierre de la conexi\u00f3n lo habr\u00eda dejado inaccesible.</p> <p>Cuando se cierra un objeto <code>Statement</code>, su objeto <code>ResultSet</code> actual, si existe, tambi\u00e9n se cierra. Pero eso no ocurre cuando se cierra la conexi\u00f3n.</p> <pre><code>try (Connection connection = dataSource.getConnection();\nStatement statement = connection.createStatement()) {\ntry (ResultSet resultSet = statement.executeQuery(\"SELECT * FROM ....\")) {\n// Do actions.\n}\n}\n</code></pre>"},{"location":"ud2/24transactions/","title":"\u26a1Transacciones","text":"<p>En el \u00e1mbito de las Bases de Datos, una transacci\u00f3n es cualquier conjunto de sentencias SQL que se ejecutan como si de una sola se tratara. La idea principal es poder ejecutar varias sentencias, que est\u00e1n relacionadas de alguna manera, de forma que, si cualquiera de ellas fallara o produjera un error, no se ejecutara ninguna m\u00e1s e incluso se deshicieran todos los cambios que hayan podido efectuar las que ya se hab\u00edan ejecutado dentro de la misma transacci\u00f3n, por eso decimos, que las transacciones se consideran unitarias. Es decir, las operaciones que componen la transacci\u00f3n se deben ejecutar todas o ninguna. Esto ayuda a preservarla integridad de los datos e impide posibles desfases entre clientes y servidor.</p> <p>De entrada, cualquier sentencia SQL se considera una transacci\u00f3n en s\u00ed misma y si se produce un error durante su ejecuci\u00f3n se anular\u00e1n todas las operaciones simples derivadas de la ejecuci\u00f3n de la sentencia.</p> <p>Una transacci\u00f3n tiene dos finales posibles, <code>COMMIT</code> o <code>ROLLBACK</code>. Si se finaliza correctamente y sin problemas se har\u00e1 con <code>COMMIT</code>, con lo que los cambios se realizan en la base de datos, y si por alguna raz\u00f3n hay un fallo, se deshacen los cambios efectuados hasta ese momento, con la ejecuci\u00f3n de <code>ROLLBACK</code>.</p> <p></p> <p>Por defecto, al menos en MySQL, en una conexi\u00f3n trabajamos en modo autocommit con valor true. Eso significa que cada consulta es una transacci\u00f3n en la base de datos, es decir, que los cambios se aplicar\u00e1n en la base de datos una vez que la query se haya ejecutado correctamente.</p> <p>Por tanto, si queremos definir una transacci\u00f3n de varias operaciones, estableceremos el modo autocommit a false con el m\u00e9todo <code>setAutoCommit</code> de la clase <code>Connection</code>.</p> <p>En modo <code>no autocommit</code> las transacciones quedan definidas por las ejecuciones de los m\u00e9todos <code>commit</code> y <code>rollback</code>. Una transacci\u00f3n abarca desde el \u00faltimo commit o rollback hasta el siguiente commit. Los m\u00e9todos <code>commit</code> o <code>rollback</code> forman parte de la clase <code>Connection</code>.</p> <p>En la siguiente porci\u00f3n de c\u00f3digo, se puede ver un ejemplo sencillo de c\u00f3mo se puede utilizar <code>commit</code> y <code>rollback</code>: tras las operaciones se realiza el <code>commit</code>, y si ocurre una excepci\u00f3n, al capturarla realizar\u00edamos el <code>rollback</code>.</p> <pre><code>public static void execute (String [] sqlqueries) throws SQLException {\nboolean autocommit = true;\nString user = \"patricia\";\nString password = \"marti\";\nString url = \"jdbc:mysql://localhost/severo_ad\";\ntry (final Connection con = DriverManager.getConnection(url, user, password)) {\ntry (Statement stmt = con.createStatement()) {\nautocommit = con.getAutoCommit();\ncon.setAutoCommit(false);\nfor (String query : sqlqueries) {\nstmt.executeUpdate(query);\n}\ncon.commit();\ncon.setAutoCommit(autocommit);\n} catch (SQLException ex) {\ncon.rollback();\nthrow ex;\n}\n}\n}\n</code></pre>"},{"location":"ud2/25procedures/","title":"\ud83d\udcd8Procedimientos y funciones almacenadas","text":"<p>Un procedimiento almacenado es un procedimiento o subprograma que est\u00e1 almacenado en la base de datos. Muchos sistemas gestores de bases de datos los soportan, por ejemplo: MySQL, Oracle, etc.</p> <p>Adem\u00e1s, estos procedimientos suelen ser de dos clases:</p> <ul> <li> Procedimientos almacenados.</li> <li> Funciones, las cuales devuelven un valor que se puede emplear en otras sentencias SQL.</li> </ul>"},{"location":"ud2/25procedures/#procedimientos-almacenados","title":"\ud83d\udcc1 Procedimientos almacenados","text":"<p>La ejecuci\u00f3n de procedimientos almacenados sigue la misma estructura que cualquiera de las sentencias SQL de los ejemplos anteriores, con la excepci\u00f3n de que usaremos la clase <code>CallableStatement</code> para representar al procedimiento y el m\u00e9todo <code>execute()</code> de la misma para ejecutarlo.</p> <p><code>CallableStatement</code> extiende de <code>PreparedStatement</code>.</p> Procedure.java<pre><code>CallableStatement stmt=con.prepareCall(\"{call insertUser(?,?)}\");  stmt.setInt(1,1011);  stmt.setString(2,\"Patricia\");  stmt.execute(); </code></pre>"},{"location":"ud2/25procedures/#funciones","title":"\ud83d\udcc1 Funciones","text":"<p>En el caso de las funciones almacenadas, para su ejecuci\u00f3n seguiremos la misma estructura que hemos visto en el caso de las consultas SQL para el caso concreto de las funciones agregadas, ya que nuestras funciones nos devolver\u00e1n siempre un solo valor (o null en el caso de que no devuelvan nada).</p> Function.sql<pre><code>create or replace function sum4  (n1 in number,n2 in number)  return number  is   temp number(8);  begin  temp :=n1+n2;  return temp;  end;  /  </code></pre> Sum.java<pre><code>CallableStatement stmt=con.prepareCall(\"{?= call sum4(?,?)}\");  stmt.setInt(2,10);  stmt.setInt(3,43);  stmt.registerOutParameter(1,Types.INTEGER);  //valor de retorno\nstmt.execute();\nSystem.out.println(stmt.getInt(1));  </code></pre>"},{"location":"ud2/26rendimiento/","title":"\ud83e\udde0 Mejora del rendimiento","text":"<p>Otro aspecto importante que mide la calidad de las aplicaciones es la eficiencia con la que se consigue comunicar con el SGBD. Para optimizar la conexi\u00f3n es importante reconocer qu\u00e9 procesos pueden actuar de cuello de botella y bajo qu\u00e9 circunstancias o qu\u00e9 otras agilizan las respuestas de los SGBD.</p> <ol> <li> <p>En primer lugar, analizaremos la petici\u00f3n de conexi\u00f3n a un SGBD porque se trata de un proceso costoso pero inevitable que hay que considerar.</p> </li> <li> <p>En segundo lugar, estudiaremos las sentencias predefinidas (<code>PreparedStatement</code>), porqu\u00e9 su uso facilita la creaci\u00f3n de datos clave e \u00edndices temporales de modo que sea posible anticiparse a la demanda o disponer de los datos de forma mucho m\u00e1s r\u00e1pida.</p> </li> </ol>"},{"location":"ud2/26rendimiento/#ciclo-de-vida-de-una-conexion","title":"\ud83e\ude90 Ciclo de vida de una conexi\u00f3n","text":"<p>El establecimiento de una conexi\u00f3n es un procedimiento bastante lento, tanto en la parte cliente como la parte servidor. En la parte cliente, <code>DriverManager</code> debe descubrir el controlador correcto de entre todos los que tenga que gestionar. La mayor\u00eda de veces las aplicaciones trabajar\u00e1n s\u00f3lo con un \u00fanico controlador, pero hay que tener en cuenta que <code>DriverManager</code> no conoce a priori qu\u00e9 URL de conexi\u00f3n corresponde a cada controlador, y para averiguarlo env\u00eda una petici\u00f3n de conexi\u00f3n a cada controlador que tenga registrado, el controlador que no le devuelve error ser\u00e1 el correcto.</p> <p>En el lado servidor, se crear\u00e1 un contexto espec\u00edfico y se habilitar\u00e1n un conjunto de recursos para cada cliente conectado. Es decir, que durante la petici\u00f3n de conexi\u00f3n del SGBD debe gastar un tiempo considerable antes de no dejar operativa la comunicaci\u00f3n cliente-servidor.</p> <p>Este elevado gasto de tiempo concentrado en el momento de la petici\u00f3n de conexi\u00f3n nos hace plantear si podemos considerar ineficiente abrir y cerrar la conexi\u00f3n cada vez que tengamos que ejecutar una sentencia SQL, como hemos hecho hasta ahora. Desafortunadamente no hay una \u00fanica respuesta, sino que depende de la frecuencia de uso de la conexi\u00f3n y el n\u00famero de conexiones contra un mismo SGBD coexistiendo al mismo tiempo.</p> <p></p> <p>Como en todo, se trata de encontrar el punto de equilibrio entre la cantidad de recursos empleados por conexi\u00f3n y la rentabilidad que se saca en mantenerlas abiertas. </p> <ul> <li> <p>Si el n\u00famero de clientes, y por tanto de conexiones, es bajo y la frecuencia de uso es alta, ser\u00e1 preferible mantener las conexiones abiertas mucho tiempo. </p> </li> <li> <p>Por el contrario, si el n\u00famero de conexiones es muy alto y el uso infrecuente, lo que ser\u00e1 preferible ser\u00e1 abrir y cerrar la conexi\u00f3n cada vez que se necesite. </p> </li> </ul> <p>Mientras tanto, habr\u00e1 una multitud de casos en que la soluci\u00f3n consistir\u00e1 en mantener las conexiones abiertas, pero no permanentemente. Se puede dar un tiempo de vida a cada conexi\u00f3n, o bien cerrarlas despu\u00e9s de restar inactiva una cantidad determinada de tiempo, o se puede usar el criterio de mantener un n\u00famero m\u00e1ximo de conexiones abiertas, cerrando las m\u00e1s antiguas o las m\u00e1s inactivas cuando se sobrepase el l\u00edmite.</p> <p>\ud83d\ude36\u200d\ud83c\udf2b\ufe0f Nota</p> <p>Por otra parte, hay que tener en cuenta tambi\u00e9n que una misma aplicaci\u00f3n puede trabajar con varias conexiones simult\u00e1neamente para incrementar la eficiencia. Cada conexi\u00f3n abre un hilo de ejecuci\u00f3n independiente, por lo que es posible el env\u00edo simult\u00e1neo de peticiones.</p>"},{"location":"ud2/26rendimiento/#sentencias-predefinidas","title":"\u26a1 Sentencias predefinidas","text":"<p><code>PreparedStatement</code> presenta ventajas sobre su antecesor <code>Statement</code> cuando tengamos que trabajar con sentencias que haya que ejecutar varias veces. </p> \u2b50Statement\u2b50 \u2b50PreparedStatement\u2b50 Statement is usually parsed and executed each time. PreparedStatement is parsed once and executed with different parameters repeatedly. A statement is a static Sql statement.It does not support parameters. A PreparedStatement is a dynamic Sql statement.It does supports parameters. It is slower because every time the statements get parsed and executed. This is faster because this is precompiled once and gets executed with different parameters. Statement verifies metadata against database everytime. PreparedStatement verifies metadata against database only once. If we want to execute sql statement once it is recommended to use statement. If we want to execute sql statements repeatedly it is recommended to use PreparedStatement. <p>La raz\u00f3n es que cualquier sentencia SQL, cuando se env\u00eda el SGBD ser\u00e1 compilada antes de ser ejecutada. Usando un objeto <code>Statement</code>, cada vez que hacemos una ejecuci\u00f3n de una sentencia, ya sea v\u00eda executeUpdate o bien v\u00eda executeQuery, el SGBD la compilar\u00e1, ya que le llegar\u00e1 en forma de cadena de caracteres.</p> <p>En cambio, al <code>PreparedStament</code> la sentencia nunca var\u00eda y por lo tanto se puede compilar y almacenar dentro del mismo objeto, por lo que las siguientes veces que se ejecute no habr\u00e1 que compilarla. Esto reducir\u00e1 sensiblemente el tiempo de ejecuci\u00f3n. La parametrizaci\u00f3n, adem\u00e1s, ayuda a crear sentencias muy gen\u00e9ricas que se puedan reutilizar f\u00e1cilmente.</p> <p>En algunos sistemas gestores, adem\u00e1s, usar <code>PreparedStatement</code> puede llegar a suponer m\u00e1s ventajas, ya que utilizan la secuencia de bytes de la sentencia para detectar si se trata de una sentencia nueva o ya se ha servido con anterioridad. De esta manera se propicia que el sistema almacene las respuestas en la cach\u00e9, de manera que se puedan entregar de forma m\u00e1s r\u00e1pida.</p> <p>Important \ud83e\udd14</p> <p>The use of a <code>Statement</code> in JDBC should be 100% localized to being used for DDL (ALTER, CREATE, GRANT, etc) as these are the only statement types that cannot accept BIND VARIABLES. <code>PreparedStatements</code> or <code>CallableStatements</code> should be used for EVERY OTHER type of statement (DML, Queries). As these are the statement types that accept bind variables.</p> <p>This is a fact, a rule, a law -- use prepared statements EVERYWHERE. Use STATEMENTS almost no where.</p>"},{"location":"ud2/26rendimiento/#ejemplos-de-problemas-con-statement","title":"\ud83d\udcdd Ejemplos de problemas con Statement","text":"<ul> <li> 1. <code>Statement</code> acepta cadenas como consultas SQL. Por lo tanto, el c\u00f3digo se vuelve menos legible cuando concatenamos cadenas SQL:</li> </ul> <pre><code>public void insert(PersonEntity personEntity) {\nString query = \"INSERT INTO persons(id, name, age, email) VALUES(\" + personEntity.getId() + \", '\" + personEntity.getName() + \", '\" + personEntity.getAge() + \", '\" + personEntity.getEmail() + \"')\";\nStatement statement = connection.createStatement();\nstatement.executeUpdate(query);\n}\n</code></pre> <ul> <li> 2. Es vulnerable a la inyecci\u00f3n de SQL. </li> </ul> <pre><code>public void check(String name) {\nString query = \"SELECT * FROM users WHERE name = '\" + name + \"';\";\nStatement statement = connection.createStatement();\nstatement.executeUpdate(query);\n}\n</code></pre> <p>Si un usuario malintencionado escribe como nombre de usuario a consultar: </p> <p><code>Alicia'; DROP TABLE usuarios; SELECT * FROM datos WHERE nombre LIKE '%</code></p> <p>Se generar\u00eda la siguiente consulta SQL, (el color verde es lo que pretende el programador, el azul es el dato, y el rojo, el c\u00f3digo SQL inyectado):</p> <p></p> <p>En la base de datos se ejecutar\u00eda la consulta en el orden dado, se seleccionar\u00edan todos los registros con el nombre 'Alicia', se borrar\u00eda la tabla 'usuarios' y finalmente se seleccionar\u00eda toda la tabla \"datos\", que no deber\u00eda estar disponible para los usuarios web comunes.'</p>"},{"location":"ud2/27projectstructure/","title":"\ud83e\udded Estructura de un proyecto con JDBC","text":"<p>Para las tareas de clase vamos a seguir una estructura que iremos perfilando basada en el MVC (modelo - vista - controlador). En el IntelliJ, crearemos un nuevo proyecto con la siguiente distribuci\u00f3n de paquetes:</p> <p></p>"},{"location":"ud2/27projectstructure/#1-creando-la-bbdd","title":"1\ufe0f\u20e3 - Creando la BBDD","text":"<p>Lo primero que tendremos que hacer asegurarnos de que tenemos el servidor de base de datos instalado y la base de datos creada con las tablas que necesitemos para nuestra aplicaci\u00f3n.</p> <p></p> <p>Creamos tambi\u00e9n la tabla login con la que vamos a trabajar en los ejemplos:</p> <pre><code>CREATE TABLE `login` (\n`id` int NOT NULL AUTO_INCREMENT,\n`user_name` varchar(50) NOT NULL,\n`password` varchar(255) NOT NULL,\n`created_at` datetime DEFAULT CURRENT_TIMESTAMP,\nPRIMARY KEY (`id`),\nUNIQUE KEY `user_name` (`user_name`)\n);\n</code></pre>"},{"location":"ud2/27projectstructure/#2-clase-connection","title":"2\ufe0f\u20e3 - Clase <code>Connection</code>","text":"<p>Conectar a la BD es un coste muy grande, ya que es un proceso lento, por lo tanto, implementaremos la clase de conexi\u00f3n a la base de datos utilizando el patr\u00f3n singleton. </p> <p>Esta clase estar\u00e1 ubicada dentro del paquete util.</p> <p>Ejemplo de conexi\u00f3n a la BBDD usando Singleton:</p> DatabaseConnection.java<pre><code>public class DatabaseConnection {\nprivate static Connection connection = null;\nprivate DatabaseConnection() {}\nstatic\n{\nString url = \"jdbc:mysql://localhost/severo\";\nString user = \"patricia\";\nString password = \"marti\";\ntry {\nconnection = DriverManager.getConnection(url, user, password);\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\npublic static Connection getConnection() {\nreturn connection;\n}\npublic static void close() throws SQLException {\nconnection.close();\n}\n}\n</code></pre>"},{"location":"ud2/27projectstructure/#3-creando-el-modelo","title":"3\ufe0f\u20e3 - Creando el modelo","text":"<p>El modelo contiene una representaci\u00f3n de los datos que maneja la aplicaci\u00f3n y su l\u00f3gica de negocio.</p> <p>Para el ejemplo, el modelo de <code>Login</code> debe contener los atributos que contiene la tabla login como variables de la clase Normalmente los modelos de la clase se encuentran en un paquete llamado model.</p> Login.java<pre><code>public class Login {\nprivate int id;\nprivate String username;\nprivate String password;\nprivate LocalDateTime createdAt;\n//constructors\n//getters y setters\n@Override\npublic String toString() {\nreturn \"Login{\" +\n\"id=\" + id +\n\", username='\" + username + '\\'' +\n\", password='\" + password + '\\'' +\n\", createdAt=\" + createdAt +\n'}';\n}\n}\n</code></pre>"},{"location":"ud2/27projectstructure/#4-clases-para-la-manipulacion-de-la-base-de-datos","title":"4\ufe0f\u20e3 - Clases para la manipulaci\u00f3n de la base de datos","text":"<p>Dentro del paquete mysql a\u00f1adiremos clases que ser\u00e1n las encargadas de manipular la informaci\u00f3n contra la base de datos. </p> <p>En el ejemplo tenemos una clase que realiza la manipulaci\u00f3n de la informaci\u00f3n referente a la tabla login.</p> LoginAccessDB.java<pre><code>public class LoginAccessDB {\nprivate static Connection con = DatabaseConnection.getConnection();\npublic List&lt;Login&gt; getLogins() throws SQLException {\nString sql = \"SELECT * FROM login\";\ntry (Statement statement = con.createStatement()) {\nList&lt;Login&gt; lg = new ArrayList&lt;&gt;();\nResultSet resultSet = statement.executeQuery(sql);\nwhile (resultSet.next()) {\nLogin login = new Login();\nlogin.setId(resultSet.getInt(1));\nlogin.setUsername(resultSet.getString(\"username\"));\nlogin.setPassword(resultSet.getString(\"password\"));\nlogin.setCreatedAt(resultSet.getTimestamp(\"created_at\").toLocalDateTime());\nlg.add(login);\n}\nreturn lg;\n}\n}\n}\n</code></pre> <p>\ud83d\ude36\u200d\ud83c\udf2b\ufe0f Nota</p> <p>M\u00e1s adelante veremos que hay clases que siguen el patr\u00f3n DAO que se encargan del acceso a base de datos.</p>"},{"location":"ud2/27projectstructure/#5-test","title":"5\ufe0f\u20e3 - Test","text":"<p>Por \u00faltimo comprobamos que todo funciona correctamente haciendo una peque\u00f1a prueba en nuestro <code>main</code> o punto de entrada al programa.</p> MainApp.java<pre><code>public class MainApp {\npublic static void main(String[] args) {\nLoginAccessDB loginHandleDB = new LoginAccessDB();\ntry {\nfor (Login l: loginHandleDB.getLogins()) {\nSystem.out.println(l);\n}\n} catch (SQLException ex) {\nSystem.out.println(\"SQLException: \" + ex.getMessage());\nSystem.out.println(\"SQLState: \" + ex.getSQLState());\nSystem.out.println(\"VendorError: \" + ex.getErrorCode());\n}\n}\n}\n</code></pre>"},{"location":"ud2/27projectstructure/#6-fichero-readme","title":"6\ufe0f\u20e3 - Fichero README","text":"<p>Readme: el propio nombre, l\u00e9eme, indica su prop\u00f3sito: ser le\u00eddo. El archivo readme es el primer archivo que un desarrollador debe mirar antes de embarcarse en un proyecto, por lo que tambi\u00e9n es esencial saber c\u00f3mo escribir un buen archivo readme, para que toda la informaci\u00f3n relevante se presente de forma compacta.</p> <p>Consejo</p> <p>El nombre del archivo se escribe README en may\u00fasculas. De este modo, los sistemas que diferencian entre may\u00fasculas y min\u00fasculas listar\u00e1n el archivo antes que todos los dem\u00e1s archivos que empiezan con min\u00fasculas.</p>"},{"location":"ud2/27projectstructure/#que-suelen-incluir-los-ficheros-readme","title":"\u00bfQu\u00e9 suelen incluir los ficheros README?","text":"<p>Suelen incluir informaci\u00f3n sobre:</p> <ul> <li>Una descripci\u00f3n general del sistema o proyecto.</li> <li>El estado del proyecto, que es particularmente importante si el proyecto est\u00e1 todav\u00eda en desarrollo. En \u00e9l se mencionan los cambios planeados y la direcci\u00f3n de desarrollo del proyecto, y se especifica directamente si un proyecto est\u00e1 terminado.</li> <li>Los requisitos del entorno de desarrollo para la integraci\u00f3n.</li> <li>Una lista de las tecnolog\u00edas utilizadas y, cuando proceda, enlaces con m\u00e1s informaci\u00f3n.</li> <li>Bugs conocidos y posibles correcciones de errores.</li> <li>Secci\u00f3n de preguntas frecuentes con todas las preguntas planteadas hasta la fecha.</li> <li>Informaci\u00f3n sobre derechos de autor y licencias.</li> </ul>"},{"location":"ud2/27projectstructure/#como-escribir-un-fichero-readme","title":"C\u00f3mo escribir un fichero README","text":"<p>El contenido del fichero README debe estar en ingl\u00e9s.</p> <p></p> <p>C\u00f3mo crear un fichero README</p>"},{"location":"ud2/27projectstructure/#exportar-la-bbdd-de-mysql","title":"Exportar la BBDD de MySQL","text":"<p>En MySQL workbench seleccionamos Server --&gt; Data Export</p> <p></p> <p>Selecciono el esquema de BBDD que quiero exportar y hago click en Start export</p> <p></p> <p>Workbench me muestra d\u00f3nde se ha generado el fichero:</p> <p></p>"},{"location":"ud3/31mapeo/","title":"\ud83d\udcbe Herramientas mapeo objeto - relacional (ORM)","text":""},{"location":"ud3/31mapeo/#problemas-con-jdbc","title":"Problemas con JDBC","text":"<p>Aunque JDBC nos permit\u00eda abstraer la conexi\u00f3n del driver con la base de datos correcta, todav\u00eda presenta limitaciones:</p> <ul> <li>N\u00famero importante de l\u00edneas de c\u00f3digo</li> <li>Invertir tiempo en los dos modelos relacional y orientado a objetos</li> <li>Cu\u00e1nto mayor crece la base de datos m\u00e1s complicado se hace el mantenimiento</li> <li>Manejo de conexi\u00f3n, cierre de conexi\u00f3n, etc</li> <li>Seguimos teniendo desfase en el mapeo objeto modelo relacional, JDBC no solventa del todo este desfase puesto que todav\u00eda tenemos que descomponer el objeto para construir la sentencia INSERT, DELETE o UPDATE que queremos utilizar.</li> </ul> <p></p>"},{"location":"ud3/31mapeo/#por-que-necesitamos-un-orm","title":"\u00bfPor qu\u00e9 necesitamos un ORM?","text":"<p>Las herramientas ORM (Object Relational Mapping) intentan aprovechar la madurez y la eficiencia de las bases de datos relacionales minimizando en lo posible el desfase objeto relacional.</p> <p>Se trata de bibliotecas y marcos de programaci\u00f3n que definen un formato para expresar m\u00faltiples situaciones de transformaci\u00f3n entre ambos paradigmas.</p> <p>En cierta forma podr\u00edamos decir que implementan una base de datos orientada a objetos virtual para que aportan caracter\u00edsticas propias del paradigma OO, pero el sustrato donde se acaban almacenando los objetos es un SGBD relacional.</p>"},{"location":"ud3/31mapeo/#orm","title":"ORM","text":"<p>Un ORM intenta hacer todas estas tareas pesadas por nosotros. Deberemos definir la forma en la que estableceremos la correspondencia entre las clases y las tablas una s\u00f3la vez (indicando qu\u00e9 propiedad se corresponde con qu\u00e9 columna, qu\u00e9 clase con qu\u00e9 tabla, etc).</p> <p>Despu\u00e9s, podremos hacer cosas como utilizar POJO's(Plain Old Java Objects) de nuestra aplicaci\u00f3n y decirle a nuestro ORM que los haga persistentes, con una instrucci\u00f3n similar a esta <code>save(myObject)</code>. Es decir, una herramienta ORM puede leer o escribir en la base de datos utilizando objetos directamente.</p> <p></p> <p> Una herramienta ORM permite tomar un objeto Java y hacerlo persistente, cargar el objeto de la base de datos en memoria y hacer consultas a las tablas de la base de datos. </p>"},{"location":"ud3/31mapeo/#ventajas-de-orm","title":"Ventajas de ORM","text":"<p>\u2747\ufe0f Ayudan a reducir el tiempo de desarrollo de software. La mayor\u00eda de las herramientas ORM disponibles, permiten la creaci\u00f3n del modelo a trav\u00e9s del esquema de la base de datos, es decir, el usuario crea la base de datos y la herramienta autom\u00e1ticamente lee el esquema de tablas y relaciones y crea un modelo ajustado.</p> <p>\u2747\ufe0f Abstracci\u00f3n de la base de datos.</p> <p>\u2747\ufe0f Reutilizaci\u00f3n.</p> <p>\u2747\ufe0f Permiten persistir objetos a trav\u00e9s de un m\u00e9todo save o persist y generar el SQL correspondiente.</p> <p>\u2747\ufe0f Permiten recuperar los objetos persistidos a trav\u00e9s de un m\u00e9todo load o get.</p> <p>\u2747\ufe0f Lenguaje propio para realizar las consultas.</p> <p>\u2747\ufe0f Independencia de la base de datos.</p> <p>\u2747\ufe0f Incentivan la portabilidad y escalabilidad de los programas de software.</p>"},{"location":"ud3/31mapeo/#desventajas-de-orm","title":"Desventajas de ORM","text":"<p>\u2734\ufe0f Tiempo utilizado en el aprendizaje. Este tipo de herramientas suelen ser complejas por lo que su correcta utilizaci\u00f3n lleva un tiempo que hay que emplear en ver el funcionamiento correcto y ver todo el partido que se le puede sacar.</p> <p>\u2734\ufe0f Menor rendimiento (aplicaciones algo m\u00e1s lentas). Esto es debido a que todas las consultas que se hagan sobre la base de datos, el sistema primero deber\u00e1 de transformarlas al lenguaje propio de la herramienta, luego leer los registros y por \u00faltimo crear los objetos.</p> <p>\u2734\ufe0f Sistemas complejos. Normalmente la utilidad de ORM desciende con la mayor complejidad del sistema relacional.</p>"},{"location":"ud3/32jpa/","title":"Jakarta - JPA (Java Persistence API)","text":"<p>JPA es una especificaci\u00f3n que ofrece Java para implementar un Framework Object Relational Mapping (ORM), \u00e9sta especificaci\u00f3n indica c\u00f3mo se debe realizar la persistencia de los objetos en programas Java. </p> <p>F\u00edjate que se ha destacado la palabra \"especificaci\u00f3n\" porque JPA no tiene una implementaci\u00f3n concreta, sino que, existen diversas tecnolog\u00edas que implementan JPA para darle concreci\u00f3n.</p> <p>Persistencia en este contexto cubre tres \u00e1reas:</p> <ul> <li>La API en s\u00ed misma, definida en el paquete <code>jakarta.persistence</code></li> <li>El lenguaje de consulta Java Persistence Query Language (JPQL).</li> <li>Metadatos objeto/relacional.</li> </ul> <p>Importante</p> <p>The JPA was renamed as Jakarta Persistence in 2019 and version 3.0 was released in 2020. This included the renaming of packages and properties from javax.persistence to jakarta.persistence.</p>"},{"location":"ud3/32jpa/#como-funciona-jpa","title":"\u00bfC\u00f3mo funciona JPA?","text":"<p>Dado que es una especificaci\u00f3n, JPA no proporciona clase alguna para poder trabajar con la informaci\u00f3n. Lo que hace es proveernos de una serie de interfaces que podemos utilizar para implementar la capa de persistencia de nuestra aplicaci\u00f3n, apoy\u00e1ndonos en alguna implementaci\u00f3n concreta de JPA.</p> <p>Es decir, en la pr\u00e1ctica significa que lo que vamos a utilizar es una biblioteca de persistencia que implemente JPA, no JPA directamente.</p>"},{"location":"ud3/32jpa/#arquitectura","title":"Arquitectura","text":""},{"location":"ud3/32jpa/#entidades-entity","title":"\ud83d\udd05 Entidades - Entity","text":"<p>El concepto de entidad est\u00e1 muy relacionado con los SGBD y los modelos relacionales, sobre todo en sus fases de dise\u00f1o inicial con el que se denomina modelo Entidad-Relaci\u00f3n. Para JPA, las entidades son aquellos objetos de los que se desea almacenar su estado y que acabar\u00e1n transform\u00e1ndose en tablas y relaciones.</p> <p>En JPA todas las entidades son persistentes, pero no todos los objetos lo son. Para hacer que un objeto sea persistente hay que calificarlo de entidad o bien debe formar parte del estado de una entidad (en forma de atributo, por ejemplo).</p> <p>Todas las entidades se deben poder identificar de forma \u00fanica a partir de su estado. Normalmente, ser\u00e1 suficiente con una peque\u00f1a parte de sus atributos para lograr la identificaci\u00f3n. La selecci\u00f3n de atributos que cumplan este objetivo se denominan identificadores, y en el SGBD actuar\u00e1n como clave primaria.</p>"},{"location":"ud3/32jpa/#entitymanagerfactory-y-entitymanager","title":"\ud83d\udd05 EntityManagerFactory y EntityManager","text":"<p>JPA implementa una interfaz llamada <code>EntityManager</code> que actuar\u00e1 de gestor de las entidades de la aplicaci\u00f3n. Sobre esta clase recae toda la funcionalidad referida a los procesos de persistencia y sincronizaci\u00f3n de las entidades. Se trata, seguramente, de la clase m\u00e1s importante de la biblioteca JPA.</p> <p></p> <p>Un <code>EntityManager</code> asume toda la funcionalidad que una aplicaci\u00f3n pueda necesitar, pero \u00fanicamente a nivel local. JPA no permite instanciar los EntityManager directamente, sino que obliga a instanciarlos desde un <code>EntityManagerFactory</code>, el cual a su vez s\u00f3lo podr\u00e1 ser instanciado por la clase <code>Persistence</code>. Por consiguiente , el <code>EntityManager</code> ser\u00e1 el encargado de realizar todas las operaciones de tipo CRUD ( insertar , borrar ,seleccionar y actualizar etc) sobre las entidades.</p> <p>La responsabilidad del <code>EntityManagerFactory</code> est\u00e1 restringida a la creaci\u00f3n de gestores de entidades capaces de compartir un contexto de persistencia de forma coordinada.</p> <p>En una aplicaci\u00f3n, tambi\u00e9n en las distribuidas, s\u00f3lo puede haber una \u00fanica instancia de EntityManagerFactory por cada SGBD que haya que controlar. Cualquier intento de duplicar la EntityManagerFactory podr\u00eda dar resultados inconsistentes y totalmente inesperados. Es por ello que JPA obliga a instanciar los <code>EntityManagerFactory</code> usando el m\u00e9todo est\u00e1tico de la clase Persistence llamado <code>createEntityManagerFactory</code>.</p> <p>Importante</p> <p>La primera vez que se instancie un EntityManager se conectar\u00e1 al SGBD y comprobar\u00e1 si existen todas las tablas necesarias para mantener la persistencia de las entidades que este EntityManager controle. En caso de que falte alguna, se generar\u00e1n las sentencias de creaci\u00f3n adecuadas de acuerdo con los metadatos le\u00eddas del mapeo.</p>"},{"location":"ud3/32jpa/#jpa-y-persistencecontext","title":"\ud83d\udd05 JPA y PersistenceContext","text":"<p>\u00bfQu\u00e9 es un PersistenceContext? . En primer lugar hay que tener en cuenta que un EntityManager persistir\u00e1 un \u201cconjunto de objetos\u201d \u00bfPero qu\u00e9 objetos? Aquellos que hayan sufrido modificaciones a nivel de sus propiedades o atributos y no est\u00e9n sincronizados. Esto es a lo que comunmente se le denomina PersistenceContext.</p> <p></p> <p>Para conseguir que alguno de nuestros objetos pase a ubicarse dentro del PersistenceContext bastar\u00e1 con invocar los m\u00e9todos persist, merge, sobre \u00e9l.</p> <p></p> <pre><code>public static void main(String[] args) {\nPersona yo = new Persona(\"Patricia\", 12);\nEntityManagerFactory emf =\nPersistence.createEntityManagerFactory(\"default\");\nEntityManager em = emf.createEntityManager();\ntry {\nem.getTransaction().begin();\nem.persist(yo);\nem.getTransaction().commit();\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\nem.close();\n}\n}\n</code></pre>"},{"location":"ud3/32jpa/#estados-de-las-entidades-en-jpa","title":"\ud83d\udd05 Estados de las entidades en JPA","text":"<p>Una de las cosas mas importantes a entender en JPA son los distintos estados de las entidades que manejamos. JPA soporta 4 estados:</p> <ul> <li> <p>New o Transient (Transitorio): Una entidad es transitoria cuando se acaba de crear mediante el operador new, pero a\u00fan no ha sido gestionada por el EntityManager. En este estado, la entidad no tiene una representaci\u00f3n persistente en la base de datos. No est\u00e1 asociado a ning\u00fan PersistenceContext.</p> </li> <li> <p>Managed (Gestionado): Una entidad est\u00e1 gestionada cuando ha sido recuperada de la base de datos o persistida en la base de datos y se encuentra bajo el control de un EntityManager. En este estado, cualquier cambio realizado en la entidad se reflejar\u00e1 en la base de datos cuando se confirme la transacci\u00f3n.</p> </li> <li> <p>Detached (Desconectado): Una entidad se encuentra en estado desconectado cuando ha sido gestionada por un EntityManager, pero ese EntityManager ya no la gestiona. Esto suele ocurrir cuando la transacci\u00f3n en la que se recuper\u00f3 la entidad ha finalizado o si se ha cerrado el EntityManager.</p> </li> <li> <p>Removed (eliminado) : Es el estado en el cual se encuentra una entidad que esta todavia controlada por el PersistenceContext pero va a ser eliminada de la base de datos.</p> </li> </ul>"},{"location":"ud3/32jpa/#relacion-de-metodos-jpa-con-estados-de-las-entidades","title":"\ud83d\udd05 Relaci\u00f3n de m\u00e9todos JPA con estados de las entidades","text":"<ul> <li><code>persist()</code>: cambia el estado de un objeto que est\u00e1 en estado new al estado managed y lo asocia a un contexto de persistencia.</li> <li><code>remove()</code>: pasa el estado de un objeto de managed a removed.</li> <li><code>detach()</code>: un objeto que estaba en estado managed lo pasa a estado detached. Mantiene su identidad de persistencia pero ya no est\u00e1 asociado a ning\u00fan contexto de persistencia.</li> <li><code>merge()</code>: se encarga de convertir un objeto nuevo o detached en uno nuevo managed. La diferencia fundamental con persist es que, persist no asume que el objeto existe en la base de datos previamente. Algo que si se puede dar con el m\u00e9todo merge.</li> </ul>"},{"location":"ud3/32jpa/#fichero-de-persistencia","title":"\ud83d\udd05 Fichero de persistencia","text":"<p>La configuraci\u00f3n de cada <code>EntityManagerFactory</code> se consigue a trav\u00e9s de un archivo XML llamado persistence.xml. Se encuentra situado en un directorio de la aplicaci\u00f3n llamado META-INF de un proyecto Java. Este fichero se encarga de conectarnos a la base de datos y define el conjunto de entidades que vamos a gestionar, por tanto, dentro de este archivo escribiremos todas las configuraciones de conexi\u00f3n necesarias para cada SGBD. Cada configuraci\u00f3n constituir\u00e1 lo que llamamos una unidad de persistencia. </p> <p>Las unidades de persistencia se identifican por medio de un nombre, el cual pasaremos como par\u00e1metro al m\u00e9todo <code>createEntityMangerFactory</code> de la clase Persistence, de modo que el <code>EntityManagerFactory</code> creado estar\u00e1 configurado para conectarse a un SGBD espec\u00edfico. </p> <p>Nota</p> <p>Muchas aplicaciones Java conectan a varias bases de datos, por tanto tendr\u00e1n diferentes EntityManagerFactorys. Cada uno estar\u00e1 ligado un PersistenceUnit diferente.</p> <p>El formato XML del archivo sigue el esquema que puede verse en la figura. Del elemento ra\u00edz llamado Persistence se pueden describir tantos Persistence-Unit como sea necesario. </p> <p>Dentro de un Persistence-Unit encontramos el elemento Provider, que contendr\u00e1 la clase principal de la herramienta que implementar\u00e1 JPA. Tambi\u00e9n podemos incluir el conjunto de clases de nuestra aplicaci\u00f3n a considerar entidades y que ser\u00e1n los objetos de la persistencia. Finalmente, el esquema presenta una manera de parametrizar la configuraci\u00f3n en funci\u00f3n de los diferentes providers o herramientas de implementaci\u00f3n de JPA. Nos referimos al elemento Properties.</p> <p>Ejemplo:</p> persistence.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;persistence xmlns=\"https://jakarta.ee/xml/ns/persistence\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd\"\nversion=\"3.0\"&gt;\n&lt;persistence-unit name=\"default\"&gt;\n&lt;class&gt;es.severo.entity.Tramite&lt;/class&gt;\n&lt;properties&gt;\n&lt;property name=\"hibernate.connection.url\" value=\"jdbc:mysql://localhost:3306/testdb2\"/&gt;\n&lt;property name=\"hibernate.connection.driver_class\" value=\"com.mysql.cj.jdbc.Driver\"/&gt;\n&lt;property name=\"hibernate.connection.username\" value=\"root\"&gt;&lt;/property&gt;\n&lt;property name=\"hibernate.connection.password\" value=\"root\"&gt;&lt;/property&gt;\n&lt;property name=\"hibernate.show_sql\" value=\"true\"/&gt;\n&lt;/properties&gt;\n&lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n</code></pre> Tag name Description \ud83c\udf00 <code>&lt;persistence-unit&gt;</code> Se define una con un nombre que debe ser \u00fanico por cada proveedor que usemos. A esta persistence-unit se le puede poner un atributo transaction-type, cuyos valores pueden ser RESOURCE_LOCAL o JTA. \ud83c\udf00 <code>&lt;provider&gt;</code> Proveedor de persistencia. JPA s\u00f3lo define la API o interfaces que se deben cumplir si se quiere usa JPA, pero no implementa esas clases. Necesitamos una librer\u00eda externa que implemente esta API. Una de las m\u00e1s conocidas es Hibernate. Para este ejemplo, usaremos dos, Hibernate y EclipseLink. Por supuesto, para tener estos proveedores, necesitamos a\u00f1adir el jar correspondiente a nuestro proyecto. Si usamos maven, las dependencias ser\u00eda una de estas dos, seg\u00fan queramos EclipseLink o hibernate. \ud83c\udf00 <code>&lt;class&gt;</code> Lo utilizamos para poner las clases que van a ser persistentes. \ud83c\udf00 <code>&lt;properties&gt;</code> Contiene los par\u00e1metros de conexi\u00f3n a la base de datos. Para ello, podemos usar bien propiedades generales definidas por JPA, o bien propiedades espec\u00edficas del proveedor de persistencia que usemos, es decir, propiedades espec\u00edficas de hibernate, de EclipseLink, etc. Yo he indicado las propiedades generales de JPA. <p>El fichero es parte del standard y existir\u00e1 en cualquier implementaci\u00f3n de JPA que se utilice.</p> <p>En resumen, para crear un EntityManager necesario tener un archivo llamado persistence.xml con el formato que se acaba de describir. Adem\u00e1s, hay que crear un EntityManagerFactory configur\u00e1ndolo a partir de una unidad de persistencia incluida en el fichero persistence.xml, el cual nos permitir\u00e1 obtener el EntityManager.</p> <p>Codigo.java<pre><code>EntityManagerFactory emf = Persistence.createEntityManagerFactory(\u201cdefault\u201d); //Es el nombre que hemos puesto en &lt;persistence-unit&gt; en el fichero persistence.xml\nEntityManager em = emf.createEntityManager();\n</code></pre> Ejemplo de c\u00f3digo para crear un EntityManager a partir del fichero anterior persistence.xml.</p>"},{"location":"ud3/32jpa/#transacciones-y-excepciones","title":"\ud83d\udd05 Transacciones y excepciones","text":"<p>En aplicaciones locales EntityManager dispone del m\u00e9todo <code>getTransaction</code> para obtener la transacci\u00f3n en curso, si la hay, o para crear una de lo contrario. Una vez creada, la transacci\u00f3n se activa invocando el m\u00e9todo begin y finaliza cuando se invoca commit.</p> <p>Todas las excepciones generadas por JPA son de tipo <code>RuntimeException</code>. Este tipo de excepci\u00f3n presenta la particularidad de que no se declarar\u00e1 en la firma del m\u00e9todo y, por tanto, el uso de try-catch no es obligatorio.</p> <p></p> <p>Este tipo de transacciones presentan la ventaja de poder escribir un c\u00f3digo m\u00e1s limpio (sin sentencias try-catch intermedias), pero por el contrario el desarrollador tiene que ir mucho m\u00e1s cuidado de no olvidarse de hacer el tratamiento de las excepciones. </p> <p>Ayuda</p> <p>Para facilitar este tratamiento, todas las excepciones JPA heredan de un antecesor com\u00fan llamado <code>PersistenceException</code>.</p>"},{"location":"ud3/32jpa/#implementaciones-de-jpa","title":"Implementaciones de JPA","text":"<p>La principal ventaja que JPA nos proporciona es que, si las bibliotecas de persistencia que utilices siguen la especificaci\u00f3n JPA, podr\u00e1s cambiar de una a otra, con m\u00e1s rendimiento o caracter\u00edsticas mejores, sin tener que tocar tu c\u00f3digo, simplemente cambiando las referencias.</p> <p>Existen diversas implementaciones disponibles, como DataNucleus, ObjectDB, o Apache OpenJPA, pero las dos m\u00e1s utilizadas son EclipseLink y sobre todo Hibernate.</p> <p>Hibernate, en la actualidad es casi el \"est\u00e1ndar\" de facto, puesto que es la m\u00e1s utilizada, sobre todo en las empresas. Es tan popular que existen hasta versiones para otras plataformas, como NHibernate para la plataforma .NET. Es un proyecto muy maduro (de hecho, la especificaci\u00f3n JPA original parti\u00f3 de \u00e9l), muy bien documentado y que tiene un gran rendimiento.</p> <p>Importante \ud83e\udd14</p> <p>Hibernate y HQL se crearon antes de la especificaci\u00f3n JPA. Hasta la versi\u00f3n Hibernate 3, JPQL es un subconjunto de HQL.</p>"},{"location":"ud3/33hibernate/","title":"3.3.- Hibernate","text":"<p>\ud83d\udc3b\u200d\u2744\ufe0f Hibernate, como una soluci\u00f3n ORM, efectivamente \"se ubica entre\" la capa de acceso a datos de la aplicaci\u00f3n Java y la base de datos relacional, como se puede ver en el diagrama siguiente.</p> <p>\ud83c\udf10 Documentaci\u00f3n oficial</p>"},{"location":"ud3/33hibernate/#arquitectura","title":"Arquitectura","text":"<p>La arquitectura \"completa\" abstrae la aplicaci\u00f3n de las APIs de JDBC/JTA y permite que Hibernate se encargue de los detalles. Hibernate usa JDBC para conectar con la BBDD y ejecutar querys.</p> <p>Como proveedor de persistencia de Jakarta, Hibernate implementa las especificaciones de la API de persistencia de Java (JPA) y la asociaci\u00f3n entre las interfaces de persistencia de Jakarta y las implementaciones espec\u00edficas de Hibernate, que se pueden ver en el siguiente diagrama:</p> <p></p> <ul> <li> <p>\ud83e\udd16 SessionFactory: inmutable, es una f\u00e1brica para instanciar objetos <code>Session</code>. <code>EntityManagerFactory</code> es el equivalente de Persistencia de Jakarta de <code>SessionFactory</code>. Una <code>SessionFactory</code> es muy costosa de crear, por lo que, para cualquier base de datos dada, la aplicaci\u00f3n debe tener solo una SessionFactory asociada. SessionFactory mantiene los servicios que Hibernate usa en todas las sesiones, como cach\u00e9s de segundo nivel, grupos de conexiones, integraciones de sistemas de transacciones, etc.</p> </li> <li> <p>\ud83e\udd16 Session: En la nomenclatura de persistencia de Jakarta, la sesi\u00f3n est\u00e1 representada por un <code>EntityManager</code>. Session envuelve un JDBC java.sql.Connection y act\u00faa como una f\u00e1brica para las instancias de org.hibernate.Transaction.</p> </li> <li> <p>\ud83e\udd16 Transaction: <code>EntityTransaction</code> es el equivalente de Jakarta Persistence y ambos act\u00faan como una API de abstracci\u00f3n para aislar la aplicaci\u00f3n del sistema de transacciones subyacente en uso (JDBC o JTA).</p> </li> </ul>"},{"location":"ud3/33hibernate/#persistence-context","title":"Persistence Context","text":"<p>Tanto la API <code>org.hibernate.Session</code> como la API <code>jakarta.persistence.EntityManager</code> representan un contexto para tratar con datos persistentes. Este concepto se denomina contexto de persistencia. Los datos persistentes tienen un estado en relaci\u00f3n con un contexto de persistencia y la base de datos subyacente.</p> <ul> <li> <p>\ud83e\udde3 Transient (transitorio): la entidad acaba de ser instanciada y no est\u00e1 asociada con un contexto de persistencia. No tiene una representaci\u00f3n persistente en la base de datos y, por lo general, no se ha asignado ning\u00fan valor de identificador (a menos que se haya utilizado el generador asignado). No est\u00e1 asociado a ninguna sesi\u00f3n.</p> </li> <li> <p>\ud83e\udde3 Persistent: la entidad tiene un identificador asociado y est\u00e1 asociada con un contexto de persistencia. Puede o no existir f\u00edsicamente en la base de datos todav\u00eda.</p> </li> <li> <p>\ud83e\udde3 Detached (separado): la entidad tiene un identificador asociado pero ya no est\u00e1 asociada con un contexto de persistencia (generalmente porque el contexto de persistencia se cerr\u00f3 (sesi\u00f3n) o la instancia se desaloj\u00f3 del contexto).</p> </li> <li> <p>\ud83e\udde3 Removed: la entidad tiene un identificador asociado y est\u00e1 asociada con un contexto de persistencia; sin embargo, est\u00e1 programada para su eliminaci\u00f3n de la base de datos.</p> </li> </ul> <p></p>"},{"location":"ud3/33hibernate/#configuracion-hibernate","title":"Configuraci\u00f3n Hibernate","text":"<p>Hibernate requiere saber de antemano d\u00f3nde encontrar la informaci\u00f3n de configuraci\u00f3n de la BBDD y de mapeo que define c\u00f3mo se relacionan las clases de Java con las tablas de la base de datos. Toda esta informaci\u00f3n generalmente se proporciona como un archivo de propiedades de Java est\u00e1ndar llamado hibernate.properties, o como un archivo XML llamado hibernate.cfg.xml.</p> <p>La mayor\u00eda de las propiedades cogen los valores predeterminados y no es necesario especificarlos en el archivo de propiedades a menos que sea realmente necesario. Este archivo se guarda en el directorio ra\u00edz del classpath de su aplicaci\u00f3n.</p> <p>Para el ejemplo usaremos un fichero XML de configuraci\u00f3n:</p> hibernate.cfg.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;hibernate-configuration xmlns=\"http://www.hibernate.org/xsd/orm/cfg\"&gt;\n&lt;session-factory&gt;\n&lt;property name=\"connection.driver_class\"&gt;com.mysql.cj.jdbc.Driver&lt;/property&gt;\n&lt;property name=\"connection.url\"&gt;jdbc:mysql://localhost:3306/testdb2&lt;/property&gt;\n&lt;property name=\"connection.username\"&gt;root&lt;/property&gt;\n&lt;property name=\"connection.password\"&gt;root&lt;/property&gt;\n&lt;property name=\"dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\n&lt;!--Mapeo mediante anotaciones --&gt;\n&lt;mapping class=\"es.severo.persistence.entity.Tramite\"&gt;&lt;/mapping&gt;\n&lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre> <p>Website Oficial con todas las propiedades del fichero de configuraci\u00f3n</p>"},{"location":"ud3/33hibernate/#entity-properties","title":"Entity properties","text":"<p>Las clases que sean entidades deben cumplir las siguientes convenciones recomendadas:</p> <ul> <li>\ud83d\ude80 Incluir atributos de clase con visibilidad privada, private.</li> <li>\ud83d\ude80 A\u00f1adir el constructor por defecto, sin argumentos. Esto es un requisito de Jakarta e Hibernate para todas las clases persistentes. Hibernate necesita crear objetos para nosotros, utilizando Java Reflection.</li> <li>\ud83d\ude80 Incluir getters y setters.</li> <li>\ud83d\ude80 Declarar atributos de identificador (<code>@Id</code>) con nombres consistentes, y que se use un wrapper y no un tipo de dato primitivo. Ej Long o Integer. El atributo identificador no necesariamente necesita ser mapeado a la(s) columna(s) que definen f\u00edsicamente la clave primaria. Sin embargo, debe asignarse a la(s) columna(s) que pueden identificar de forma \u00fanica cada fila.</li> <li>\ud83d\ude80 Mapear la entidad con las anotaciones necesarias. <code>@Entity</code> para denotar que es una entidad. Y las anotaciones que se requieran en los atributos.</li> </ul>"},{"location":"ud3/33hibernate/#hibernate-query-language-hql-official-website","title":"Hibernate Query Language - HQL Official Website","text":"<p>JPQL (Java Persistence Query Language) se inspir\u00f3 en las primeras versiones de HQL y es un subconjunto del HQL moderno.</p> <p>Si se desea el cumplimiento estricto de la persistencia de Jakarta, tendr\u00edamos que utilizar en la configuraci\u00f3n la siguiente propiedad <code>hibernate.jpa.compliance.query=true</code>. Con esta configuraci\u00f3n, cualquier intento de utilizar funciones HQL m\u00e1s all\u00e1 del subconjunto JPQL dar\u00e1 como resultado una excepci\u00f3n. </p> <p>HQL (y JPQL) se basan libremente en SQL y son f\u00e1ciles de aprender para cualquiera que est\u00e9 familiarizado con SQL.</p> <p>Hibernate usa un poderoso lenguaje de consulta (HQL) que es similar en apariencia a SQL. Sin embargo, en comparaci\u00f3n con SQL, HQL est\u00e1 completamente orientado a objetos y comprende nociones como herencia, polimorfismo y asociaci\u00f3n.</p> <p>El lenguaje de consulta de Hibernate (HQL) y el lenguaje de consulta de persistencia de Java (JPQL) son lenguajes de consulta orientados a objetos basados \u200b\u200ben SQL y muy similares a SQL.</p> <p>HQL no es la \u00fanica forma de escribir consultas en Hibernate:</p> <ul> <li>\ud83e\udde8Criteria ofrece una API basada en Java con mayor seguridad de tipos en tiempo de compilaci\u00f3n, y</li> <li>\ud83e\udde8tambi\u00e9n son posibles las consultas SQL nativas.</li> </ul> <p>Sin embargo, HQL es la opci\u00f3n m\u00e1s conveniente para la mayor\u00eda de las personas la mayor parte del tiempo.</p>"},{"location":"ud3/33hibernate/#hibernate-dml-language","title":"\ud83d\udc88 Hibernate DML language","text":"<p>Hibernate provee m\u00e9todos para ejecutar sentencias DML.</p> <ul> <li>Insert: para agregar objetos usamos el m\u00e9todo <code>persist()</code>. En versiones anteriores se usaba <code>save()</code>, pero este m\u00e9todo est\u00e1 deprecado y no se recomienda su uso.</li> <li>Update: cuando modificamos un objeto usaremos <code>merge()</code> para guardar su estado en la base de datos. En versiones anteriores se usaba <code>saveOrUpdate()</code>, pero este m\u00e9todo est\u00e1 deprecado y no se recomienda su uso.</li> <li>Delete:  cuando queremos borrar un objeto en la base de datos usamos <code>remove()</code>. En versiones anteriores se usaba <code>delete()</code>, pero este m\u00e9todo est\u00e1 deprecado y no se recomienda su uso.</li> </ul> <pre><code>public static void main(String[] args) {\nSession session = null;\ntry {\nsession = HibenateUtil.getSessionFactory().openSession();\nsession.beginTransaction();\nLocalDateTime now = LocalDateTime.now();\nTramite tramite = new Tramite();\ntramite.setFecha(now);\ntramite.setTipo(\"Cr\u00e9dito\");\n/* INSERT */\n//session.save(tramite);//deprecated\nsession.persist(tramite);\n/* UPDATE */\ntramite.setTipo(\"Aval\"):\n//session.saveOrUpdate(tramite);//deprecated\nsession.merge(tramite);\n/* DELETE */\n//session.delete(tramite);//deprecated\nsession.remove(tramite);\nsession.getTransaction().commit();\n} catch (Exception e) {\nif (session.getTransaction() != null) {\nsession.getTransaction().rollback();\nthrow e;\n}\n} finally {\nif (session != null)\nsession.close();\n}\n}\n</code></pre>"},{"location":"ud3/33hibernate/#obtener-una-entidad-con-sus-datos-inicializados","title":"\ud83d\udc88 Obtener una entidad con sus datos inicializados","text":"<p>Tambi\u00e9n es bastante com\u00fan querer obtener una entidad junto con sus datos, es decir, cargar un objeto.</p> <ul> <li>Obtenci\u00f3n de una referencia de entidad con sus datos inicializados con Jakarta Persistence</li> </ul> <pre><code>Person person = entityManager.find(Person.class, personId);\n</code></pre> <ul> <li>Obtenci\u00f3n de una referencia de entidad con sus datos inicializados con la API de Hibernate</li> </ul> <pre><code>Person person = session.find(Person.class, 1L);\n</code></pre> <ul> <li>Obtenci\u00f3n de una referencia de entidad con sus datos inicializados usando la API de Hibernate byId()</li> </ul> <p><pre><code>Person person = session.byId(Person.class).load(personId);\n</code></pre> En ambos casos, se devuelve <code>null</code> si no se encuentra ninguna fila de base de datos coincidente.</p> <ul> <li>Obtenci\u00f3n de una referencia de entidad Opcional con sus datos inicializados usando la API de Hibernate byId()</li> </ul> <p>Tambi\u00e9n es posible devolver un Java 8 Opcional:</p> <pre><code>Optional&lt;Person&gt; optionalPerson = session.byId(Person.class).loadOptional(personId);\n</code></pre>"},{"location":"ud3/33hibernate/#hibernate-query","title":"\ud83d\udc88 Hibernate Query","text":"<p>La interfaz de sesi\u00f3n de Hibernate refina los tipos de devoluci\u00f3n de las operaciones de <code>EntityManager</code> que crean objetos de consulta.</p> <p><code>Session#createQuery()</code>, <code>Session#createNamedQuery()</code> y otras operaciones similares devuelven una instancia de la extensi\u00f3n <code>org.hibernate.query.Query</code>.</p> <p>Algunas formas sobrecargadas de estas operaciones devuelven un tipo sin formato, pero en Hibernate 6 todas han quedado obsoletas y el uso del tipo Query sin formato ahora se desaconseja enf\u00e1ticamente. </p> <p>Important</p> <p>Los programas deben migrar al uso de sobrecargas con seguridad de tipos que aceptan un objeto <code>Class&lt;T&gt;</code> y devuelven una <code>Query&lt;T&gt;</code> con tipo.</p> <p>La interfaz de consulta de Hibernate ofrece operaciones adicionales que no est\u00e1n disponibles a trav\u00e9s de TypedQuery, como veremos a continuaci\u00f3n.</p> <pre><code>Query&lt;Tramite&gt; query = session.createQuery(\n\"from Tramite where tipo = :tipoTram\",\nTramite.class);\n</code></pre>"},{"location":"ud3/33hibernate/#binding-arguments-en-los-parametros-de-la-query","title":"\ud83c\udf90 BINDING arguments en los par\u00e1metros de la query","text":"<p>Una consulta puede tener par\u00e1metros con nombre o par\u00e1metros ordinales:</p> <ul> <li>Named parameters: se especifican usando la sintaxis: :name</li> <li>Ordinal parameters: se especifican usando la sintaxis ?1, ?2, etc.</li> </ul> named parameters<pre><code>    Query&lt;Tramite&gt; query = session.createQuery(\n\"from Tramite where tipo = :tipoTram\",\nTramite.class)\n.setParameter(\"tipoTram\", \"Cr\u00e9dito\");\n</code></pre> <p>Los par\u00e1metros ordinales de estilo JPQL se numeran desde 1. Al igual que con los par\u00e1metros con nombre, un par\u00e1metro ordinal puede aparecer varias veces en una consulta.</p> ordinal parameters<pre><code>    Query&lt;Tramite&gt; query = session.createQuery(\n\"from Tramite where tipo = ?1\",\nTramite.class)\n.setParameter(1, \"Cr\u00e9dito\");\n</code></pre> <p>Warning</p> <p>No es una buena idea mezclar named parameters y ordinales en una sola consulta.</p>"},{"location":"ud3/33hibernate/#ejecutando-la-consulta","title":"\ud83c\udf90 EJECUTANDO la consulta","text":"<p>La interfaz Query se utiliza para controlar la ejecuci\u00f3n de la consulta. Ofrece tres tipos de resultados:</p> <ul> <li><code>getResultList()</code>: es \u00fatil cuando la consulta puede devolver cero o m\u00e1s de un resultado.</li> <li><code>getSingleResult()</code>: es solo para casos en los que la consulta siempre devuelve exactamente un resultado. Lanza una excepci\u00f3n cuando la base de datos devuelve cero o muchos resultados.</li> <li><code>getResultStream()</code>: permite que los resultados se recuperen de forma incremental, utilizando un cursor de base de datos.</li> </ul> <pre><code>    List&lt;Person&gt; persons = entityManager.createQuery(\n\"select p \" +\n\"from Person p \" +\n\"where p.name like 'John%' \",\nPerson.class).getResultList();\nQuery&lt;Tramite&gt; query = session.createQuery(\n\"from Tramite where tipo = :tipoTram\",\nTramite.class)\n.setParameter(\"tipoTram\", \"Cr\u00e9dito\");\nList&lt;Tramite&gt; tramites = query.getResultList();\ntramites.forEach(System.out::println);\nQuery&lt;Tramite&gt; query2 = session.createQuery(\n\"from Tramite where tipo = ?1\",\nTramite.class)\n.setParameter(1, \"Cr\u00e9dito\")\n.setMaxResults(1);//limitaci\u00f3n de un resultado\nTramite tramites2 = query2.getSingleResult();\nSystem.out.println(tramites2);\ntry(Stream&lt;Tramite&gt; tramiteStream = session.createQuery(\n\"from Tramite where tipo = ?1\",\nTramite.class)\n.setParameter(1, \"Cr\u00e9dito\")\n.getResultStream()) {\nList&lt;Tramite&gt; t = tramiteStream\n.skip(2)//salta los dos primeros, los quita\n.limit(5)//saca como m\u00e1ximo 5 \u00edtems\n.collect(Collectors.toList());\nt.forEach(System.out::println);\n}\n</code></pre> <p>Warning</p> <p>El m\u00e9todo <code>getResultStream()</code> no suele ser \u00fatil. Casi siempre es una mala idea mantener abierto el cursor de una base de datos.</p>"},{"location":"ud3/33hibernate/#scrolling-y-streaming-resultados","title":"\ud83c\udf90 SCROLLING y STREAMING resultados","text":"<p>La interfaz <code>org.hibernate.query</code> ofrece dos operaciones especializadas para leer los resultados de la consulta de manera incremental, mientras mantiene un ResultSet JDBC abierto asignado a un cursor del lado del servidor.</p> <p>Si la aplicaci\u00f3n no cierra un <code>ScrollableResults</code>, Hibernate cerrar\u00e1 autom\u00e1ticamente los recursos subyacentes cuando finalice la transacci\u00f3n. Sin embargo, es mucho mejor cerrar el <code>ResultSet</code> lo antes posible.</p> <pre><code>try(ScrollableResults&lt;Tramite&gt; scrollableResults = session.createQuery(\n\"from Tramite where tipo = ?1\",\nTramite.class)\n.setParameter(1, \"Cr\u00e9dito\")\n.scroll()) {\nwhile(scrollableResults.next()) {\nTramite ta = scrollableResults.get();\nSystem.out.println(ta);\n}\n}\n</code></pre> <p>De manera similar, <code>getResultStream()</code> es una operaci\u00f3n especializada para leer resultados de consultas de manera incremental, mientras mantiene un ResultSet JDBC abierto asignado a un cursor del lado del servidor.</p> <p>Warning</p> <p>El m\u00e9todo <code>getResultStream()</code> no es una forma conveniente de obtener un flujo de Java. Por ello, usaremos <code>getResultList().stream()</code> cuando queramos utilizar streams.</p> <p>Ya hemos visto anteriormente un ejemplo de getResultStream, veamos ahora usando un stream a partir de <code>getResultList().stream()</code></p> <pre><code>try(Stream&lt;Tramite&gt; tramiteStream = session.createQuery(\n\"from Tramite where tipo = :tipoTram\",\nTramite.class)\n.setParameter(\"tipoTram\", \"Cr\u00e9dito\")\n.getResultList()\n.stream()) {\nList&lt;Tramite&gt; t = tramiteStream\n.collect(Collectors.toList());\nt.forEach(System.out::println);\n}\n</code></pre> <p>Hibernate cerrar\u00e1 autom\u00e1ticamente los recursos cuando finalice la transacci\u00f3n. Sin embargo, es mucho mejor cerrar el <code>ResultSet</code> lo antes posible. El programa siempre debe cerrar un Stream ya sea expl\u00edcitamente, llamando a close() o usando un bloque try-with-resources.</p>"},{"location":"ud3/33hibernate/#criteria-sitio-web-oficial","title":"Criteria - Sitio Web Oficial","text":"<p>Las consultas Criteria ofrecen una alternativa de tipo seguro a las consultas HQL, JPQL y SQL nativas. Son una forma program\u00e1tica y segura de escribir para expresar una consulta.</p> <p>Las consultas Criteria son esencialmente un grafo de objetos, donde cada parte del grafo representa una parte cada vez m\u00e1s at\u00f3mica (a medida que navegamos por este grafo) de la consulta. </p>"},{"location":"ud3/33hibernate/#grafo-criteria","title":"\ud83e\uddee Grafo Criteria","text":""},{"location":"ud3/33hibernate/#1-el-primer-paso-para-realizar-una-consulta-criteria-es-construir-el-grafo","title":"1\ufe0f\u20e3 El primer paso para realizar una consulta Criteria es construir el grafo","text":"<p>La interfaz <code>jakarta.persistence.criteria.CriteriaBuilder</code> es una f\u00e1brica para todas las piezas individuales de criteria. Se obtiene una instancia de jakarta.persistence.criteria.CriteriaBuilder llamando al m\u00e9todo <code>getCriteriaBuilder()</code> de <code>jakarta.persistence.EntityManagerFactory</code> o <code>jakarta.persistence.EntityManager</code>.</p>"},{"location":"ud3/33hibernate/#2-el-siguiente-paso-es-obtener-un-jakartapersistencecriteriacriteriaquery","title":"2\ufe0f\u20e3 El siguiente paso es obtener un <code>jakarta.persistence.criteria.CriteriaQuery</code>","text":"<p>Esto se logra usando uno de los tres m\u00e9todos en <code>CriteriaBuilder</code>:</p> <p>\u231b  CriteriaQuery createQuery( Class resultClass ) --&gt; Querys tipadas <p>\u231b CriteriaQuery createTupleQuery() <p>\u231b CriteriaQuery"},{"location":"ud3/33hibernate/#3-seleccionar-una-entidad","title":"3.3.- Hibernate","text":""},{"location":"ud3/33hibernate/#4-seleccion-de-una-expresion","title":"3.3.- Hibernate","text":""},{"location":"ud3/33hibernate/#5-seleccion-de-multiples-atributos","title":"3.3.- Hibernate","text":""},{"location":"ud3/33hibernate/#pom-proyecto","title":"3.3.- Hibernate","text":""},{"location":"ud3/34dao/","title":"Patr\u00f3n DAO - Data access object","text":"<p>Si bien es posible inyectar el acceso a la fuente de datos donde los necesitemos, no es una buena idea -de hecho resulta horrible- ir repartiendo su uso por el c\u00f3digo de nuestro proyecto sin seguir criterio alguno. Crearemos un caos que violar\u00e1 los principios de encapsulaci\u00f3n y desacoplamiento de la programaci\u00f3n orientado a objetos.</p> <p>Incluso habr\u00e1 ocasiones en las que necesitaremos tener m\u00e1s de una fuente de datos o la fuente de datos que tenemos variar\u00e1, lo que nos obligar\u00eda a refactorizar gran parte del c\u00f3digo.</p> <p>La soluci\u00f3n est\u00e1ndar consiste en recurrir al patr\u00f3n de dise\u00f1o Data Access Object (objeto de acceso a datos), m\u00e1s conocido por las siglas DAO. Las clases DAO son las responsables de implementar todas las operaciones con una fuente y\\o almacenamiento de datos. Fuera de ellas, el c\u00f3digo no tiene conocimiento sobre c\u00f3mo se realiza la persistencia; puede ser una base de datos relacional o \u00abno SQL\u00bb, ficheros de texto, etc\u00e9tera. </p> <p></p> <p>Exponemos una API y todo lo dem\u00e1s queda encapsulado y abstra\u00eddo en los DAOs, los cuales, generalmente, obtendremos con una factor\u00eda. Por lo com\u00fan, cuando la fuente de datos es una base de datos relacional, una clase DAO contiene todas las operaciones centradas en una tabla, es decir, crearemos un DAO para cada entidad que lo requiera.</p>"},{"location":"ud3/34dao/#1-creacion-de-las-interfaces-dao","title":"\ud83e\ude80 1. Creaci\u00f3n de las interfaces DAO","text":"<p>Lo primero que haremos ser\u00e1 crear las interfaces de las entidades que requieran acceso a la base de datos. Creamos interfaces para exponerlas en forma de API sus operaciones. Ya que la implementaci\u00f3n de \u00e9stas estar\u00e1 en otras clases para encapsular las operaciones.</p> <p>Usaremos los ejemplos de clase <code>Person</code> y <code>Address</code> que ten\u00edan una relaci\u00f3n muchos a muchos.</p> PersonDao.java<pre><code>public interface PersonDao {\nOptional&lt;Person&gt; findById(Long id);\nvoid create(Person person);\nvoid save(Person person);\nvoid deleteById(Long id);\nvoid delete(Person person);\n}\n</code></pre> <p>Nota</p> <p>En el DAO suelen ir las operaciones comunes usadas para la entidad. La nomenclatura suele ser nombre de la entidad seguido de la palabra <code>Dao</code>.</p>"},{"location":"ud3/34dao/#2-implementacion-de-las-interfaces-dao","title":"\ud83e\ude80 2. Implementaci\u00f3n de las interfaces DAO","text":"<p>Cada interfaz DAO tendr\u00e1 su implementaci\u00f3n. Las clases que implementan las interfaces ser\u00e1n nombradas como entidad + DAO + Impl: <code>PersonDaoImpl</code>.</p> PersonDaoImpl.java<pre><code>public class PersonDaoImpl implements PersonDao {\n@Override\npublic Optional&lt;Person&gt; findById(Long id) {\ntry (Session session = HibenateUtil.getSessionFactory().openSession();) {\nreturn Optional.ofNullable(session.find(Person.class, id));\n}\n}\n@Override\npublic void create(Person person) {\ntry (Session session = HibenateUtil.getSessionFactory().openSession();) {\nTransaction tx = null;\ntry {\ntx = session.beginTransaction();\nsession.persist(person);\ntx.commit();\n} catch (RuntimeException e) {\nif (tx != null)\ntx.rollback();\ne.printStackTrace();\n}\n}\n}\n@Override\npublic void save(Person person) {\ntry (Session session = HibenateUtil.getSessionFactory().openSession();) {\nsession.beginTransaction();\nsession.merge(person);\nsession.getTransaction().commit();\n}\n}\n@Override\npublic void deleteById(Long id) {\ntry (Session session = HibenateUtil.getSessionFactory().openSession();) {\nsession.beginTransaction();\nsession.remove(session.find(Person.class, id));\nsession.getTransaction().commit();\n}\n}\n@Override\npublic void delete(Person person) {\ntry (Session session = HibenateUtil.getSessionFactory().openSession();) {\nsession.beginTransaction();\nsession.remove(person);\nsession.getTransaction().commit();\n}\n}\n}\n</code></pre> <p>Si hici\u00e9ramos lo mismo para la entidad <code>Address</code>, es decir, cre\u00e1ramos la interfaz <code>AddressDao</code> y su implementaci\u00f3n <code>AddressDaoImpl</code> nos dar\u00edamos cuenta de que las clases ser\u00edan muy parecidas a <code>PersonDao</code> y <code>PersonDaoImpl</code>, ya que contendr\u00eda los mismos m\u00e9todos con la \u00fanica diferencia de que cambia la entidad. Entonces estar\u00edamos creando mucha cantidad de c\u00f3digo redundante.</p>"},{"location":"ud3/34dao/#3-creacion-de-un-dao-generico","title":"\ud83e\ude80 3. Creaci\u00f3n de un DAO gen\u00e9rico","text":"<p>Para mejorar la reusabilidad y legilibidad del c\u00f3digo deber\u00edamos hacer uso de los gen\u00e9ricos que nos ofrece Java. Por tanto, se ha de crear un DAO general que incluya las funcionalidades m\u00e1s gen\u00e9ricas de los DAO, <code>GenericDao</code>.</p> GenericDao.java<pre><code>public interface GenericDao&lt;T&gt; {\nOptional&lt;T&gt; findById(Long id);\nvoid create(T entity);\nvoid save(T entity);\nvoid deleteById(Long id);\nvoid delete(T entity);\n}\n</code></pre> <p>Todos los DAOs heredar\u00e1n de <code>GenericDao</code>, lo que quiere decir que todos los DAO contendr\u00e1n esos m\u00e9todos, cumplir\u00e1n con esas funciones.</p>"},{"location":"ud3/34dao/#4-implementacion-del-dao-generico","title":"\ud83e\ude80 4. Implementaci\u00f3n del DAO gen\u00e9rico","text":"GenericDaoImpl.java<pre><code>public class GenericDaoImpl&lt;T&gt; implements GenericDao&lt;T&gt; {\nprivate final Class&lt;T&gt; entityClass;\npublic GenericDaoImpl(Class&lt;T&gt; entityClass) {\nthis.entityClass = entityClass;\n}\n@Override\npublic Optional&lt;T&gt; findById(Long id) {\ntry (Session session = HibenateUtil.getSessionFactory().openSession();) {\nreturn Optional.ofNullable(session.find(entityClass, id));\n}\n}\n@Override\npublic void create(T entity) {\ntry (Session session = HibenateUtil.getSessionFactory().openSession();) {\nTransaction tx = null;\ntry {\ntx = session.beginTransaction();\nsession.persist(entity);\ntx.commit();\n} catch (RuntimeException e) {\nif(tx != null)\ntx.rollback();\ne.printStackTrace();\n}\n}\n}\n@Override\npublic void save(T entity) {\ntry (Session session = HibenateUtil.getSessionFactory().openSession();) {\nsession.beginTransaction();\nsession.merge(entity);\nsession.getTransaction().commit();\n}\n}\n@Override\npublic void deleteById(Long id) {\ntry (Session session = HibenateUtil.getSessionFactory().openSession();) {\nsession.beginTransaction();\nsession.remove(session.find(entityClass, id));\nsession.getTransaction().commit();\n}\n}\n@Override\npublic void delete(T entity) {\ntry (Session session = HibenateUtil.getSessionFactory().openSession();) {\nsession.beginTransaction();\nsession.remove(entity);\nsession.getTransaction().commit();\n}\n}\n}\n</code></pre> <p>La creaci\u00f3n de esta clase gen\u00e9rica conlleva los siguientes cambios en las clases DAO:</p> AddressDao.java<pre><code>public interface AddressDao extends GenericDao&lt;Address&gt; {\n}\n</code></pre> AddressDaoImpl.java<pre><code>public class AddressDaoImpl extends GenericDaoImpl&lt;Address&gt; implements AddressDao {\npublic AddressDaoImpl() {\nsuper(Address.class);\n}\n}\n</code></pre> <p>Ahora mismo la clase <code>AddressDao</code> no definir\u00eda ning\u00fan m\u00e9todo nuevo, solo los que ya hereda de GenericDAO. Por tanto, \u00bfpara qu\u00e9 nos sirve tener esta clase? Ahora mismo, podr\u00edamos eliminarla, ya que no tiene ninguna funcionalidad extra, pero en un futuro si queremos realizar una operaci\u00f3n muy espec\u00edfica, o una query relacionada con esa tabla, deberemos definir ese m\u00e9todo dentro de <code>AddressDaoImpl</code>.</p>"},{"location":"ud3/35service/","title":"\ud83d\udd2e Capa de servicios","text":"<p>Es conveniente separar la l\u00f3gica del c\u00f3digo de la aplicaci\u00f3n con las operaciones que acceden a la base de datos. Para ello, se puede crear una capa intermedia llamada service.</p> <p>En nuestro proyecto deberemos crear un paquete llamado <code>service</code> que contendr\u00e1 las clases necesarias para interactuar con los objetos DAO.</p> <p>Dentro del paquete service, creamos la clase <code>PersonalDataService</code> con atributos de tipo DAO y m\u00e9todos para realizar diferentes operaciones necesarias en la aplicaci\u00f3n que adem\u00e1s a\u00f1adir\u00e1n l\u00f3gica de negocio.</p> PersonalDataService.java<pre><code>public class PersonalDataService {\nprivate final PersonDAO personDAO;\nprivate final GenericDAO&lt;Person&gt; personGenericDAO;\npublic PersonalDataService() {\nthis.personDAO = new PersonDAOImpl();\nthis.personGenericDAO = new PersonDAOImpl();\n}\npublic Optional&lt;Person&gt; getPersonById(Long id) {\nreturn personGenericDAO.findById(id);\n}\npublic void createPerson(Person person, List&lt;Address&gt; addresses) {\nif (addresses != null) {\nfor (Address address: addresses) {\nperson.getAddresses().add(address);\n}\n}\npersonDAO.create(person);//se podr\u00eda usar el atributo personGenericDAO\n}\n}\n</code></pre>"},{"location":"ud3/35service/#testeo-de-la-aplicacion","title":"\ud83d\udd2e Testeo de la aplicaci\u00f3n","text":"<p>Para probar el c\u00f3digo simplemente tendremos que crear un objeto de la clase service y ejecutar los m\u00e9todos convenientes:</p> Test.java<pre><code>public static void main(String[] args) {\nPersonalDataService p = new PersonalDataService();\np.createPerson(new Person(\"Patricia\"), new ArrayList&lt;Address&gt;(\nArrays.asList(new Address(\"Elche\",\"19AB\"))));\nSystem.out.println(p.getPersonById(9L));\n}\n</code></pre>"},{"location":"ud4/41introduccionspring/","title":"\ud83d\uddb2\ufe0f Introducci\u00f3n a Spring Framework - Web oficial","text":"<p>Debido al aumento de la complejidad que presentan la mayor\u00eda de los sistemas web, tanto en temas de seguridad, funcionalidad y gr\u00e1ficas, la comunidad de desarrolladores se vio en la necesidad de dise\u00f1ar ciertas ayudas, a fin de no tener que repetir c\u00f3digo, reduciendo de este modo el tiempo y el espacio para el desarrollo de aplicaciones.</p> <p>Lanzado por primera vez, como una plataforma de c\u00f3digo abierto Java, en el mes de Junio del a\u00f1o 2003 bajo la licencia Apache 2.0, se convirti\u00f3 desde entonces en el framework m\u00e1s popular para Java empresarial, para crear c\u00f3digo de alto rendimiento, liviano y reutilizable. </p> <p>Su finalidad es estandarizar, agilizar, manejar y resolver los problemas que puedan ir surgiendo en el trayecto de la programaci\u00f3n.</p> <p>Spring se puede considerar como el padre del los frameworks Java, ya que da soporte a varios frameworks como: Hibernate, Struts, Tapestry, EJB, JSF entre otros.</p> <p>La versi\u00f3n actual de Spring Framework es la 6.x.x, esta versi\u00f3n requiere Java 17+ y puedes obtener la documentaci\u00f3n desde su web oficial.</p>"},{"location":"ud4/41introduccionspring/#modulos-de-spring","title":"\ud83e\ude94 M\u00f3dulos de Spring","text":"<p>Spring est\u00e1 compuesto por muchas librer\u00edas y cada una de ellas est\u00e1 destinada a una finalidad: Bases de datos, Seguridad, Servicios Web, etc. As\u00ed, estas librer\u00edas se engloban en distintos m\u00f3dulos listos para usar. \u00c9stos son algunos de ellos:</p> <ul> <li>Spring Core Container: IoC Container (Inversi\u00f3n de Control): Administra la creaci\u00f3n, configuraci\u00f3n y destrucci\u00f3n de objetos (beans) en una aplicaci\u00f3n. DI (Inyecci\u00f3n de Dependencias): Permite la inyecci\u00f3n de dependencias en los objetos, facilitando la configuraci\u00f3n y el mantenimiento.</li> <li>Spring AOP (Aspect-Oriented Programming): Facilita la programaci\u00f3n orientada a aspectos, permitiendo separar preocupaciones transversales como la seguridad y el registro del c\u00f3digo principal.</li> <li>Spring Data: Proporciona librer\u00edas necesarias para trabajar con bases de datos relacionales y no relacionales.</li> <li>Spring Cloud: Facilita el despliegue de aplicaciones Spring en plataformas ubicadas en la nube.  </li> <li>Spring Security: Ofrece librer\u00edas que facilitan la seguridad en aplicaciones Spring, en relaci\u00f3n a controles de acceso y autenticaci\u00f3n.</li> <li>Spring Batch: Se utiliza para automatizar tareas batch. Estas tareas normalmente s ejecutan en horar\u00edos nocturnos y donde se manejan grandes cantidades de datos. </li> <li>Spring Model-View-Controller (MVC): Ofrece una implementaci\u00f3n del patr\u00f3n MVC para el desarrollo de aplicaciones web.</li> <li>Spring Test: Ofrece soporte para la escritura y ejecuci\u00f3n de pruebas unitarias y de integraci\u00f3n para componentes de Spring.</li> </ul> <p>Estos m\u00f3dulos pueden reducir dr\u00e1sticamente el tiempo de desarrollo de una aplicaci\u00f3n.</p>"},{"location":"ud4/41introduccionspring/#que-es-spring-boot","title":"\ud83e\ude94 \u00bfQu\u00e9 es Spring Boot?","text":"<p>Spring Boot es b\u00e1sicamente una extensi\u00f3n del marco Spring, que elimina las configuraciones repetitivas necesarias para configurar una aplicaci\u00f3n Spring.</p>"},{"location":"ud4/41introduccionspring/#como-arranca-spring-boot","title":"\u00bfC\u00f3mo arranca Spring Boot?","text":"<p>El punto de entrada de una aplicaci\u00f3n Spring Boot es la clase anotada con @SpringBootApplication. De forma predeterminada, Spring Boot utiliza un contenedor integrado para ejecutar la aplicaci\u00f3n. En este caso, Spring Boot utiliza el punto de entrada principal p\u00fablico est\u00e1tico y vac\u00edo para iniciar un servidor web integrado.</p> <p>Otra caracter\u00edstica de Spring Boot es que escanea autom\u00e1ticamente todas las clases en el mismo paquete o subpaquetes de la clase principal en busca de componentes.</p>"},{"location":"ud4/41introduccionspring/#requisitos-para-crear-un-proyecto-con-spring","title":"\ud83e\ude94 Requisitos para crear un proyecto con Spring","text":"<p>Para crear un proyecto con Spring debemos realizar una serie de pasos:</p> <ol> <li>Elegir el tipo de proyecto, es decir, elegir la herramienta de construcci\u00f3n del proyecto: Maven o Gradle y la versi\u00f3n de Java.</li> <li>Seleccionar las dependencias que necesitamos y su versi\u00f3n.</li> <li>Construir la estructura de directorios de nuestro proyecto, donde estar\u00e1 el c\u00f3digo fuente, los ficheros properties, plantillas, etc.</li> <li>Uso y configuraci\u00f3n de beans.</li> </ol>"},{"location":"ud4/41introduccionspring/#beans","title":"\ud83e\ude94 Beans","text":"<p>Para entender el concepto de bean en Spring necesitamos entender antes una serie algunos conceptos y c\u00f3mo administra Spring los objetos beans.</p>"},{"location":"ud4/41introduccionspring/#dependency-injection-di","title":"\ud83e\ude83 Dependency Injection (DI)","text":"<p>La inyecci\u00f3n de dependencias es un patr\u00f3n de dise\u00f1o que tiene como objetivo tomar la responsabilidad de crear las instancias de las clases que otro objeto necesita y suministr\u00e1rselo para que esta clase los pueda utilizar.</p> <p>Habitualmente nuestras clases dependen de otras para funcionar. Este patr\u00f3n permite que una clase no sea responsable de crear o administrar sus dependencias, sino que estas le sean inyectadas desde el exterior.</p>"},{"location":"ud4/41introduccionspring/#ejemplo-de-di","title":"Ejemplo de DI","text":"<p>Por ejemplo, una clase que necesita buscar un registro en la base de datos necesitar\u00e1 de otra que se encargue de buscarlo.</p> <p>Pensemos en estas dos clases. Llamemos a la primera <code>PersonalDataService</code> que es la encargada de tomar decisiones sobre el negocio y a la segunda <code>PersonaDAO</code>, la cual se encargar\u00e1 de acceder a la base de datos. </p> <p>La clase <code>PersonalDataService</code> depende de la clase <code>PersonaDAO</code> para lograr el acceso a los datos en la base de datos, es decir, la clase <code>PersonalDataService</code> ser\u00eda la responsable de crear una instancia de la clase <code>PersonaDAO</code>.</p> <p>En la inyecci\u00f3n de dependencias \u2018alguien\u2019 externo se encarga de las dependencias que las clases necesitan.</p>"},{"location":"ud4/41introduccionspring/#inversion-of-control-ioc","title":"\ud83e\ude83 Inversion of Control (IoC)","text":"<p>Spring tambi\u00e9n maneja el concepto de inversi\u00f3n de control ocup\u00e1ndose de mantener en su \u2018contexto\u2019 (application context) todas las instancias de nuestra aplicaci\u00f3n y de inyectarle esa instancia a quien la necesite.</p> <p>Spring llama a estas instancias beans.</p> <p></p> <p>Los beans son las instancias de las clases que est\u00e1n disponibles para ser reutilizados y son gestionados dentro del contenedor de Spring (Spring container). Spring sabe qu\u00e9 dependencias existen entre las instancias y se encarga de satisfacerlas.</p> <p>Note</p> <p>IoC es el trabajo que realiza Spring buscando estas dependencias entre los objetos y realizando el \u2018set\u2019 de estos beans en quien los requiera. Busca en su contenedor de beans la instancia adecuada y se la agrega al objeto cumpliendo as\u00ed con la inyecci\u00f3n de dependencias.</p>"},{"location":"ud4/41introduccionspring/#definir-un-bean","title":"\ud83e\ude83 Definir un Bean","text":"<p>Para definir un nuevo bean en Spring tenemos dos opciones:</p> <ul> <li>Podemos definir expl\u00edcitamente un nuevo bean mediante la anotaci\u00f3n <code>@Bean</code>.</li> <li>Podemos marcar una clase Java como un bean, y permitir a Spring que lo descubra, esto se hace mediante el escaneo de componentes.</li> </ul> <p>Estas son dos t\u00e9cnicas diferentes para a\u00f1adir beans a nuestro contexto.</p>"},{"location":"ud4/41introduccionspring/#que-es-un-componente-component-en-spring","title":"\ud83e\ude94 \u00bfQu\u00e9 es un componente <code>@Component</code> en Spring?","text":"<p>Spring define un conjunto de anotaciones core que categorizan cada uno de los componentes asociandoles una responsabilidad concreta, es lo que llamamos Spring stereotypes.</p> <p>Una clase con la anotaci\u00f3n <code>@Component</code> es un candidato a ser escaneado mediante el proceso de negociaci\u00f3n, e instanciado como un bean y a\u00f1adido al contexto.</p> <p>Cuando indicamos que una clase es un <code>@Component</code>, lo que hacemos es decirle a Spring que queremos que cree una instancia y la gestione.</p> <p><pre><code>@Component\npublic class MyClass {\npublic void doSomething() {\n//.. \n}\n}\n</code></pre> Al momento de inicializar la aplicaci\u00f3n, Spring har\u00e1 lo siguiente:</p> <ul> <li>Buscar\u00e1 dentro de la aplicaci\u00f3n las clases anotadas con<code>@Component</code></li> <li>Crear\u00e1 una instancia de los componentes</li> <li>Dejar\u00e1 el componente en su contexto</li> <li>Buscar\u00e1 qui\u00e9n necesita esos componentes y los inyectar\u00e1 en qui\u00e9n los necesite.</li> </ul>"},{"location":"ud4/41introduccionspring/#spring-stereotypes","title":"\ud83e\ude83 Spring Stereotypes","text":"<p>Los estereotipos (Stereotypes) son componentes que extienden de <code>@Component</code>.</p> <p>Existen cuatro:</p> <ol> <li> <p>@Component: estereotipo general.</p> </li> <li> <p>@Repository: ser\u00e1 parte de la \u2018capa\u2019 de persistencia cuya funci\u00f3n ser\u00e1 el acceso a los datos.</p> </li> <li> <p>@Service: ser\u00e1 parte de la \u2018capa\u2019 de servicios encargado de gestionar las operaciones de negocio m\u00e1s importantes a nivel de la aplicaci\u00f3n y aglutina llamadas a varios repositorios de forma simult\u00e1nea.</p> </li> <li> <p>@Controller: realiza las tareas de controlador y gesti\u00f3n de la comunicaci\u00f3n entre el usuario y el aplicativo. Existe <code>@RestController</code> que es una especializaci\u00f3n de controller.</p> </li> </ol> <p></p>"},{"location":"ud4/41introduccionspring/#como-crear-un-proyecto-con-spring-en-intellij","title":"\ud83e\ude94 C\u00f3mo crear un proyecto con Spring en IntelliJ","text":"<p>Podemos ayudarnos de la herramienta spring initializr para crear el proyecto. Seleccionamos la siguiente configuraci\u00f3n:</p> <p></p> <p>La exportamos y extraemos para abrir como un proyecto nuevo en IntelliJ.</p> <p>Instalamos los plugins en IntelliJ llamados JPA Buddy y Lombok que ser\u00e1n de gran ayuda para desarrollar algunas funcionalidades y ahorrarnos boilerplate.</p>"},{"location":"ud4/41introduccionspring/#autoconfiguracion-del-proyecto","title":"\ud83e\ude94 Autoconfiguraci\u00f3n del proyecto","text":"<p>La anotaci\u00f3n <code>@SpringBootApplication</code> habilita el mecanismo de configuraci\u00f3n autom\u00e1tica de la aplicaci\u00f3n en funci\u00f3n de las dependencias jar que encuentre en el classpath y se encarga del escaneo de componentes.</p>"},{"location":"ud4/41introduccionspring/#estructura-del-proyecto","title":"\ud83e\ude94 Estructura del proyecto","text":"<p>La estructura de un proyecto en Spring debe contener los siguientes paquetes entre otros:</p> <p></p>"},{"location":"ud4/42repository/","title":"\u2668\ufe0f Trabajando con Spring Data JPA","text":"<p>Gracias a Spring Data JPA, que facilita el uso de tecnolog\u00edas de acceso a datos, bases de datos relacionales y no relacionales, servicios de datos basados en la nube, etc., podemos trabajar con Spring Data JPA repositories. El objetivo del repositorio de Spring Data es reducir significativamente la cantidad de c\u00f3digo repetitivo necesario para implementar capas de acceso a datos de persistencia.</p> <p>La interfaz central en la abstracci\u00f3n del repositorio de Spring Data es <code>Repository</code>. Esta interfaz act\u00faa principalmente como una interfaz de marcador para capturar los tipos con los que trabajar y para ayudarlo a descubrir interfaces que ampl\u00edan esta. </p> <p>Las interfaces <code>CrudRepository</code> y <code>ListCrudRepository</code> brindan una funcionalidad CRUD sofisticada para la clase de entidad que se administra.</p> <p></p> <p>Adem\u00e1s de <code>CrudRepository</code>, hay una abstracci\u00f3n <code>PagingAndSortingRepository</code> que agrega m\u00e9todos adicionales para facilitar el acceso paginado a las entidades:</p> <p></p>"},{"location":"ud4/42repository/#definir-interfaces-de-repositorio","title":"\ud83d\udcae Definir interfaces de repositorio","text":"<p>Para definir una interfaz de repositorio, primero se debe crear una clase de dominio o entidad. La interfaz debe extender el <code>Repository</code> y el tipo debe ser la clase de dominio y el tipo de ID.</p> <p>Si desea exponer m\u00e9todos CRUD para ese tipo de dominio, se puede extender de <code>CrudRepository</code> o una de sus variantes en lugar de <code>Repository</code>. <code>JpaRepository</code> es una especializaci\u00f3n de <code>ListCrudRepository</code>.</p> PersonRepository.java<pre><code>public interface PersonRepository extends JpaRepository&lt;Todo, Long&gt; {\n//con esto heredamos todos los m\u00e9todos definidos en JpaRepository y las clases que se extienden en ella\n}\n</code></pre>"},{"location":"ud4/42repository/#anadir-entidades-en-intellij","title":"\ud83d\udcae A\u00f1adir entidades en IntelliJ","text":"<p>Dentro del paquete <code>entities</code> de proyecto, gracias al plugin que hemos instalado basta con hacer bot\u00f3n derecho sobre el paquete, New --&gt; JPA Entity, y nos crear\u00e1 una entidad.</p> <p>Para crear los campos de la entidad basta con hacer uso de la paleta de JPA. Para crear el atributo <code>id</code> de clave primaria hacemos doble click y rellenamos los campos.</p> <p></p> <p>Al utilizar Lombok nos podemos evitar escribir mucho c\u00f3digo boilerplate, ya que el plugin lo hace por nosotros. Para ellos, hacemos click en la palabra <code>Todo</code> de la clase java, se mostrar\u00e1n una serie de par\u00e1metros en la paleta JPA Inspector, hacemos check en las casillas de Getter, Setter y NoArgsConstructor.</p> <p></p> <p>Esto a\u00f1ade en la clase de la entidad las siguientes anotaciones: @Getter, @Setter y @NoArgsConstructor. </p> <p>Lo que implica que genera por nosotros los getters y setters de todos los campos como p\u00fablicos y el constructor por defecto.</p> Person.java<pre><code>@NoArgsConstructor\n@Getter\n@Setter\n@Entity\n@Table(name = \"person\")\npublic class Person {\n@Id\n@GeneratedValue(strategy = GenerationType.IDENTITY)\n@Column(name = \"id\", nullable = false)\nprivate Long id;\n@Column(name = \"name\")\nprivate String name;\n@Column(name = \"active\")\nprivate Boolean active;\n}\n</code></pre>"},{"location":"ud4/42repository/#query-methods","title":"\ud83d\udcae Query Methods","text":"<p>El mecanismo de creaci\u00f3n de consultas integrado en la infraestructura del repositorio Spring Data es \u00fatil para crear consultas restrictivas sobre las entidades del repositorio.</p> <p>El an\u00e1lisis de nombres de queries de consulta se divide en sujeto y predicado. </p> <ul> <li>La primera parte (<code>find\u2026By</code>, <code>exists\u2026By</code>) define el sujeto de la consulta, </li> <li>La segunda parte forma el predicado. La cl\u00e1usula introductoria (sujeto) puede contener m\u00e1s expresiones. </li> </ul> <p>Cualquier texto entre <code>find</code> (u otras palabras clave introductorias) y <code>By</code> se considera descriptivo a menos que se use una de las palabras clave que limitan los resultados, como <code>Distinct</code> o <code>Top/First</code>.</p> <p>Ejemplos de Query Methods</p> PersonRespository.java<pre><code>interface PersonRepository extends Repository&lt;Person, Long&gt; {\nList&lt;Person&gt; findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname);\n// Enables the distinct flag for the query\nList&lt;Person&gt; findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);\nList&lt;Person&gt; findPeopleDistinctByLastnameOrFirstname(String lastname, String firstname);\n// Enabling ignoring case for an individual property\nList&lt;Person&gt; findByLastnameIgnoreCase(String lastname);\n// Enabling ignoring case for all suitable properties\nList&lt;Person&gt; findByLastnameAndFirstnameAllIgnoreCase(String lastname, String firstname);\n// Enabling static ORDER BY for a query\nList&lt;Person&gt; findByLastnameOrderByFirstnameAsc(String lastname);\nList&lt;Person&gt; findByLastnameOrderByFirstnameDesc(String lastname);\n// Like - where x.firstname like ?1 (parameter bound wrapped in %)\nList&lt;Person&gt; findByFirstnameContaining(String firstname);\n//Between -  where x.startDate between ?1 and ?2 - Busca las personas nacidas entre esas fechas\nList&lt;Person&gt; findByBirthDateBetween(LocalDate dateBegin, LocalDate dateEnd);\n}\n</code></pre> <p>En la documentaci\u00f3n oficial de Spring Data JPA encontramos la siguientes tablas con las palabras clave admitidas:</p> <ul> <li>Query subject keywords</li> <li>Query predicate keywords</li> </ul>"},{"location":"ud4/42repository/#limitacion-de-resultados","title":"Limitaci\u00f3n de resultados","text":"<p>Se puede limitar los resultados de los m\u00e9todos de consulta utilizando las palabras clave <code>first</code> o <code>top</code> indistintamente. Podemos agregar un valor num\u00e9rico opcional a <code>top</code> o <code>first</code> para especificar el tama\u00f1o m\u00e1ximo de resultado que devolver\u00e1 la consulta. </p> <p>Si se omite el n\u00famero, se asume un tama\u00f1o de resultado de 1. </p> <p>Ejemplos web oficial de Spring:</p> <pre><code>User findFirstByOrderByLastnameAsc();\nUser findTopByOrderByAgeDesc();\nPage&lt;User&gt; queryFirst10ByLastname(String lastname, Pageable pageable);\nSlice&lt;User&gt; findTop3ByLastname(String lastname, Pageable pageable);\nList&lt;User&gt; findFirst10ByLastname(String lastname, Sort sort);\nList&lt;User&gt; findTop10ByLastname(String lastname, Pageable pageable);\n</code></pre>"},{"location":"ud4/42repository/#streaming-los-resultados-de-las-consultas","title":"Streaming los resultados de las consultas","text":"<p>Podemos procesar los resultados de los m\u00e9todos de consulta utilizando Java 8 Stream como tipo de retorno."},{"location":"ud4/43rest/","title":"\ud83d\udd06 API Rest","text":""},{"location":"ud4/43rest/#que-es-una-api","title":"\u2695\ufe0f\u00bfQu\u00e9 es una API?","text":"<p>Una API (Application Programming Interface) es un conjunto de definiciones y protocolos que permite que diferentes aplicaciones o sistemas se comuniquen entre s\u00ed. Es decir, una API act\u00faa como intermediario que permite que dos programas interact\u00faen y compartan informaci\u00f3n o funcionalidades.</p> <p>Las APIs son esenciales en el desarrollo moderno, ya que permiten integrar servicios como pagos, mapas, redes sociales, etc.</p>"},{"location":"ud4/43rest/#elementos-clave-de-una-api","title":"\u2695\ufe0fElementos clave de una API","text":"<ul> <li>Interfaz: define c\u00f3mo los desarrolladores pueden interactuar con el software o sistema. Esto incluye las solicitudes que se pueden realizar y los formatos de datos aceptados.</li> <li>Protocolo: especifica las reglas para intercambiar los datos, como HTTP/HTTPS para APIs webs.</li> <li>Datos: las APIs permiten enviar y recibir datos en formatos comunes como JSON o XML.</li> <li>Funcionalidades: pueden ofrecer acceso a herramientas, servicios o informaci\u00f3n de un sistema externo, sin necesidad de que los usuarios conozcan su funcionamiento interno.</li> </ul>"},{"location":"ud4/43rest/#tipos-de-apis-mas-comunes","title":"\u2695\ufe0fTipos de APIs m\u00e1s comunes","text":"<ul> <li>REST (Representational State Transfer): utilizan HTTP y son muy populares por su simplicidad.</li> <li>SOAP (Simple Object Access Protocol): m\u00e1s complejo, usa XML para intercambiar datos.</li> <li>GraphQL: permite a los clientes especificar exactamente qu\u00e9 datos necesitan.</li> </ul>"},{"location":"ud4/43rest/#api-rest_1","title":"\u2695\ufe0fAPI Rest","text":"<p>Es un tipo de API que sigue los principios de la arquitectura REST, dise\u00f1ados para facilitar la comunicaci\u00f3n entre sistemas a trav\u00e9s de la web utilizando el protocolo HTTP. REST es un estilo de arquitectura que define c\u00f3mo se deben estructurar y consumir las APIs para que sean eficientes, simples y escalables. Son ampliamente utilizadas en el desarrollo de software moderno.</p> <p>A menudo se puede ver el nombre de API RESTful, RESTful es un adjetivo que describe a las APIs que siguen los principios y restricciones de la arquitectura REST.</p>"},{"location":"ud4/43rest/#principios-de-una-api-rest","title":"\u2695\ufe0fPrincipios de una API REST","text":"<ol> <li>Cliente-Servidor: el cliente (navegador web normalmente) solicita informaci\u00f3n o realiza acciones y el servidor procesa estas solicitudes y devuelve una respuesta. Ambos son independientes.</li> <li>Stateless (Sin estado): cada solicitud del cliente al servidor es independiente. El servidor no almacena informaci\u00f3n sobre el estado de las solicitudes anteriores.</li> <li>Interfaz uniforme: la comunicaci\u00f3n entre cliente-servidor se realiza de manera consistente. Los recursos se identifican mediante URLs, y se usan m\u00e9todos HTTP est\u00e1ndar para interactuar con ellos:<ul> <li>GET: obtener datos</li> <li>POST: enviar o crear datos</li> <li>PUT o PATCH: actualizar datos existentes</li> <li>DELETE: eliminar datos</li> </ul> </li> <li>Recursos identificados por URLs: los recursos (datos) en una API REST se identifican mediante direcciones \u00fanicas o endpoints, por ejemplo, este endpoint podr\u00eda devolver los datos del usuario con ID 123: GET https://api.miservicio.com/usuarios/123</li> <li>Representaci\u00f3n de recursos: la informaci\u00f3n se intercambia en un formato espec\u00edfico, generalmente JSON o XML. JSON es el m\u00e1s popular debido a su legibilidad.</li> </ol>"},{"location":"ud4/43rest/#spring-web","title":"\u2695\ufe0fSpring Web","text":"<p>El framework Spring ofrece el m\u00f3dulo Spring Web, que se utiliza para la creaci\u00f3n de APIs REST. Este m\u00f3dulo proporciona las herramientas y anotaciones necesarias para construir y exponer endpoints RESTful.</p>"},{"location":"ud4/43rest/#componentes-de-spring-para-crear-una-api-rest","title":"\u2695\ufe0fComponentes de Spring para crear una API REST","text":"<ol> <li>Controladores REST: los controladores son los responsables de manejar las solicitudes HTTP y devolver las respuestas adecuadas.</li> <li>Anotaciones clave:<ul> <li><code>@RestController</code>: marca una clase como controlador REST. Combina @Controller y @ResponseBody, indicando que los m\u00e9todos devolver\u00e1n datos directamente (en formato JSON o XML) en lugar de vistas HTML.</li> <li><code>@RequestMapping</code>: define la ruta de acceso base para los endpoints de un controlador.</li> <li>M\u00e9todos espec\u00edficos:<ul> <li><code>@GetMapping</code>: solicitudes HTTP GET</li> <li><code>@PostMapping</code>: solicitudes HTTP POST</li> <li><code>@PutMapping</code>: solicitudes HTTP PUT</li> <li><code>@DeleteMapping</code>: solicitudes HTTP DELETE</li> <li><code>@PatchMapping</code>: solicitudes HTTP PATCH</li> </ul> </li> </ul> </li> <li>Serializaci\u00f3n y Deserializaci\u00f3n: Spring utiliza Jackson de forma predeterminada para convertir objetos Java a JSON y viceversa. Es decir, un objeto <code>Usuario</code> puede enviarse como respuesta en formato JSON autom\u00e1ticamente.</li> <li>Inyecci\u00f3n de Dependencias y Servicios: los controladores suelen delegar la l\u00f3gica de negocio a las clases servicio, marcadas con <code>@Service</code>, para mantener el c\u00f3digo modular y limpio.</li> </ol> <p>Note</p> <p>Jackson es una biblioteca Java para trabajar con datos en formato JSON. Se utiliza para la serializaci\u00f3n (convertir objetos Java a JSON) y la deserializaci\u00f3n (convertir JSON a objetos Java). Viene configurada por defecto en Spring para el intercambio de datos en APIs REST.</p>"},{"location":"ud4/43rest/#como-crear-un-controlador-rest-en-spring","title":"\u2695\ufe0fC\u00f3mo crear un controlador rest en Spring","text":"<p>El primer paso para crear un \u2018controlador rest\u2019 es anotar la clase que con <code>@RestController</code>.</p> <p>Con esto Spring ya sabe que esa clase ser\u00e1 un componente encargado de recibir llamadas.</p> <p>En la clase tambi\u00e9n podemos definir la ruta ra\u00edz por la cu\u00e1l partir\u00e1n las llamadas externas con la anotaci\u00f3n <code>@RequestMapping</code>.</p> PersonController.java<pre><code>@RestController\n@RequestMapping(\"/api\")\npublic class PersonController {\n}\n</code></pre> <p>Dentro del controlador a\u00f1adiremos los m\u00e9todos con lo que se mapear\u00e1n las diferentes rutas o paths.</p>"},{"location":"ud4/43rest/#tipos-de-mapeo-mapping-en-un-controlador-rest","title":"\u2695\ufe0fTipos de mapeo (mapping) en un controlador rest","text":"<p>Existen los siguientes tipos de mapeo que podemos usar en Spring:</p> <p></p> <ul> <li>Get: para solicitar informaci\u00f3n de un recurso.</li> <li>Post: para enviar informaci\u00f3n a fin de crear o de actualizar un recurso.</li> <li>Put: para enviar informaci\u00f3n a fin de modificar un recurso.</li> <li>Patch: actualiza una parte del recurso.</li> <li>Delete: elimina un recurso espec\u00edfico.</li> </ul>"},{"location":"ud4/43rest/#cual-es-la-diferencia-entre-post-put-patch","title":"\u00bfCu\u00e1l es la diferencia entre Post , Put, Patch?","text":"<p>Habitualmente la diferencia entre Post y Put radica en que Post lo usamos para a\u00f1adir un recurso y Put lo utilizamos para modificar un recurso en particular.</p> <p>Patch tambi\u00e9n lo utilizamos para actualizar un recurso pero solo una parcialidad del mismo.</p>"},{"location":"ud4/43rest/#ejemplos-de-mapeo","title":"\u2695\ufe0fEjemplos de mapeo","text":"PersonController.java<pre><code>@RestController\n@RequestMapping(\"/api\")\npublic class PersonController {\nprivate final PersonService personService;//Inyecci\u00f3n de dependencias\npublic PersonController(PersonService personService) {\nthis.personService = personService;\n}\n@GetMapping\npublic List&lt;Person&gt; getPersons() {\nreturn personService.findAll();\n}\n@GetMapping(\"/person/{id}\")\npublic Person byId(@PathVariable(\"id\") Long id) {\nreturn personService.find(id).orElseThrow();\n}\n@PostMapping(\"/person/\")\npublic Person newPerson(@RequestBody Person person) {\nreturn personService.create(person);\n}\n@PutMapping(\"/person/\")\npublic Person update(@RequestBody Person person) {\nreturn personService.update(person);\n}\n@PatchMapping(\"/person/\")\npublic Person change(@RequestBody Person person) {\nreturn personService.change(person);\n}\n@DeleteMapping(\"/person/{id}\")\npublic boolean delete(@PathVariable(\"id\") Long id) {\nreturn personService.remove(id);\n}\n}\n</code></pre>"},{"location":"ud4/44queryresponse/","title":"\u2753 Anotaci\u00f3n @Query y \ud83c\udd97 Response","text":""},{"location":"ud4/44queryresponse/#la-anotacion-query-tiene-4-usos","title":"\u2753 La anotaci\u00f3n '@Query' tiene 4 usos","text":"<p>1 Consultas personalizadas: Puedes definir consultas personalizadas que van m\u00e1s all\u00e1 de los m\u00e9todos CRUD b\u00e1sicos proporcionados por Spring Data JPA. Esto es \u00fatil cuando necesitas realizar operaciones m\u00e1s complejas o espec\u00edficas que no se cubren autom\u00e1ticamente.</p> <pre><code>    @Query(\"SELECT t FROM Todo t WHERE t.completed = true\")//lenguaje objeto\nList&lt;Todo&gt; encontrarTodosCompletados();\n@Query(value = \"select t from Todo t where t.title = ?1\")\nTodo findByTitleQuery(String title);\n</code></pre> <p>2 Consultas nativas: Puedes ejecutar consultas SQL nativas utilizando la anotaci\u00f3n @Query. Esto es \u00fatil cuando necesitas aprovechar funcionalidades espec\u00edficas del motor de base de datos que no est\u00e1n cubiertas por JPQL.</p> <pre><code>    @Query(value = \"SELECT * FROM todo WHERE title LIKE %:texto%\", nativeQuery = true)\nList&lt;Todo&gt; encontrarPorTextoEnTitulo(String texto);\n@Query(value = \"select * from todo t where t.title = ?1\", nativeQuery = true)\nTodo findByTitle(String title);\n</code></pre> <p>3 Actualizaciones y eliminaciones personalizadas: Puedes usar @Query para definir consultas de actualizaci\u00f3n o eliminaci\u00f3n personalizadas.</p> <pre><code>    @Modifying //Indica que la consulta modificar\u00e1 el estado de la base de datos.\n@Transactional //Indica que la transacci\u00f3n debe estar activa para ejecutar esta consulta.\n@Query(\"UPDATE Todo t SET t.title = :nuevoTitulo WHERE t.id = :todoId\")\nint updateTitleById(Long todoId, String nuevoTitulo);\n</code></pre> <p>4 Mapeo de resultados personalizados: Puedes especificar c\u00f3mo se deben mapear los resultados de la consulta a objetos Java espec\u00edficos como DTOs.</p> <pre><code>    @Query(\"SELECT new es.severo.ud4.dto.TodoDTO(t.id, t.title) FROM Todo t WHERE t.completed = false\")\nList&lt;TodoDTO&gt; encontrarTodosNoCompletados();\n</code></pre>"},{"location":"ud4/44queryresponse/#response-de-una-api-rest","title":"\ud83c\udd97 Response de una API rest","text":"<p>Para responder a una petici\u00f3n de una api de un endpoint tenemos varias formas: ResponseEntity, @ResponeStatus y @ResponseBody.</p> <ul> <li> <p>ResponseEntity: es una clase que de forma flexible nos permite manejar la respuesta HTTP. Te permite controlar tanto el cuerpo de la respuesta como los encabezados y el estado HTTP. \u00datil con c\u00f3digos personalizados</p> </li> <li> <p>@ResponeStatus: es una anotaci\u00f3n que se puede utilizar en m\u00e9todos de controlador para especificar un c\u00f3digo de estado predeterminado para todas las respuestas generadas por ese m\u00e9todo. Es \u00fatil cuando deseas establecer un c\u00f3digo de estado espec\u00edfico para todas las respuestas sin necesidad de usar ResponseEntity.</p> </li> <li> <p>@ResponseBody: es una anotaci\u00f3n que se puede usar para indicar que el valor de retorno  de un m\u00e9todo de controlador debe ser serializado directamente en el cuerpo de la respuesta HTTP. Es \u00fatil cuando simplemente deseas devolver el cuerpo de la respuesta sin personalizaci\u00f3n adicional.</p> </li> </ul>"},{"location":"ud5/51modulo/","title":"Java Modules","text":"<p>El sistema de m\u00f3dulos en Java es una caracter\u00edstica que se introdujo en el JDK 9, y fue desarrollado bajo el nombre de c\u00f3digo de proyecto Jigsaw. Java 9 introdujo un nuevo componente de programa conocido como modules.</p> <p>A partir de esta caracter\u00edstica, las aplicaciones de Java se desarrollan como colecciones de m\u00f3dulos.</p> <p>El sistema de m\u00f3dulos fue dise\u00f1ado para tener una configuraci\u00f3n confiable, encapsulaci\u00f3n fuerte y ser modular. Su prop\u00f3sito es resolver los problemas t\u00edpicos relacionados con el desarrollo y la implementaci\u00f3n de aplicaciones anteriores a Java 9.</p> <p>Esta nueva caracter\u00edstica de Java 9 es conocida colectivamente como el Sistema de M\u00f3dulos de la Plataforma Java o JPMS.</p>"},{"location":"ud5/51modulo/#que-es-un-modulo","title":"\u00bfQu\u00e9 es un m\u00f3dulo?","text":"<p>Un m\u00f3dulo es una colecci\u00f3n nombrada de datos y c\u00f3digo. Los m\u00f3dulos pueden contener c\u00f3digo Java que est\u00e1 organizado como un conjunto de paquetes, que contienen clases Java, interfaces, etc. Un m\u00f3dulo es un contenedor de paquetes.</p> <p>Cada m\u00f3dulo debe tener la siguiente configuraci\u00f3n: - name: nombre \u00fanico del m\u00f3dulo. - inputs: qu\u00e9 necesita usar el m\u00f3dulo y qu\u00e9 es necesario para compilar y ejecutar el m\u00f3dulo. - outputs: lo que el m\u00f3dulo exporta a otros m\u00f3dulos.</p> <p>Los m\u00f3dulos est\u00e1ndar tienen nombres con el prefijo java. Ejemplos: java.sql, java.net, etc. Por ejemplo, todos los nombres de los m\u00f3dulos de JavaFX tienen el prefijo javafx.</p>"},{"location":"ud5/51modulo/#fichero-module-infojava","title":"Fichero module-info.java","text":"<p>Cada m\u00f3dulo viene con un archivo descriptor de m\u00f3dulo que describe el m\u00f3dulo y contiene metadatos sobre el m\u00f3dulo. Este fichero descriptor siempre se encuentra directamente en la carpeta ra\u00edz del m\u00f3dulo y siempre tiene el nombre de module-info.java.</p>"},{"location":"ud5/51modulo/#ventajas-de-usar-modulos","title":"Ventajas de usar m\u00f3dulos","text":"<ul> <li>Escalabilidad.</li> <li>Seguridad y mantenibilidad. </li> <li>Mejora el rendimiento de la aplicaci\u00f3n.</li> <li>Facilidad a la hora de desarrollar.</li> </ul>"},{"location":"ud5/51modulo/#declaracion-de-un-modulo","title":"Declaraci\u00f3n de un m\u00f3dulo","text":"<p>Para declarar un m\u00f3dulo se utiliza la palabra reservada module seguido del nombre del m\u00f3dulo y llaves. La sintaxis es la siguiente:</p> <pre><code>    [open] module &lt;moduleName&gt; {\n&lt;module-statement&gt;;\n&lt;module-statement&gt;;\n...\n}\n</code></pre> <ul> <li>[open]: es opcional, es el modificador que declara un m\u00f3dulo abierto, un m\u00f3dulo que exporta sus paquetes para los utilice el acceso reflexivo.</li> <li>: Es un campo obligatorio. No podemos tener dos m\u00f3dulos dentro del mismo c\u00f3digo base con el mismo nombre. Es una buena pr\u00e1ctica nombrar a los m\u00f3dulos con el mismo nombre que los paquetes. El nombre del m\u00f3dulo consta de uno o m\u00e1s identificadores de Java separados por el \".\", similar a c\u00f3mo se declaran los paquetes. Ejemplo: es.education.common <li>Dentro de las llaves se puede a\u00f1adir opcionalmente 0 o m\u00e1s metadatos sobre el m\u00f3dulo o module statements. Y estos statements o declaraciones pueden ser:<ul> <li>export statement: se usa para especificar los paquetes que exporta el m\u00f3dulo actual.</li> <li>opens statement: NO se puede usar en m\u00f3dulos abiertos (open modules) porque todos los paquetes est\u00e1n abiertos en un m\u00f3dulo abierto.</li> <li>requires statement: se usa para especificar el m\u00f3dulo que requiere el m\u00f3dulo actual. Si nuestro m\u00f3dulo depende de otros m\u00f3dulos, debemos especificarlo aqu\u00ed. Podemos usarlos tantas veces como m\u00f3dulos requiera el nuestro.</li> <li>uses statement: se usa para especificar el servicio que consume el m\u00f3dulo actual.</li> <li>provides statement: se usa para especificar las implementaciones de servicio que brindan los m\u00f3dulos actuales.</li> </ul> </li> <p>El nombre del m\u00f3dulo definido se puede usar en otras declaraciones de m\u00f3dulo para expresar relaciones entre m\u00f3dulos.</p> <p>En el siguiente diagrama se muestra una estructura de proyecto antes y despu\u00e9s de utilizar modules: </p> <p>Se trata de no crear aplicaciones como un gran proyecto java, sino de crear unidades modulares que funcionan juntas para formar una aplicaci\u00f3n.</p> <p> Idealmente, los m\u00f3dulos son componentes reutilizables que resuelven requisitos espec\u00edficos para esa aplicaci\u00f3n. </p>"},{"location":"ud5/51modulo/#tipos-de-modulos","title":"Tipos de m\u00f3dulos","text":"<p>Jigsaw defini\u00f3 dos tipos de m\u00f3dulos:</p>"},{"location":"ud5/51modulo/#named-modules-modulos-con-nombre","title":"Named modules (m\u00f3dulos con nombre)","text":"<p>Cada m\u00f3dulo tiene un nombre. Pueden ser normales o autom\u00e1ticos.  \u00c9stos m\u00f3dulos deben ser declarados en el fichero module-info.java.</p> <ul> <li> <p>Normal modules: (sin modificador open). No existen oficialmente como tal en JDK 9, hace referencia a los named modules que no son autom\u00e1ticos. Y hemos dicho que tienen un fichero descriptor, el module-info.java. Se declara usando la palabra reservada module. No exporta ninguno de sus paquetes por defecto. Y se divide entre m\u00f3dulos b\u00e1sicos y abiertos (basic and open modules).</p> <ul> <li>Basic modules: tampoco existe oficialmente, simplemente se usa el t\u00e9rmino para un m\u00f3dulo que no es abierto. Es decir, m\u00f3dulos que no son automatic modules ni tampoco open modules.</li> <li>Open modules:  muchas librer\u00edas de terceros como Hibernate o Spring usan la reflexi\u00f3n para acceder a las partes internas de JDK en tiempo de ejecuci\u00f3n. Estas librer\u00edas solo funcionan con m\u00f3dulos que son open. Se definen usando la palabra resevada open. Un m\u00f3dulo abierto hace que todos los paquetes dentro del m\u00f3dulo sean accesibles para una reflexi\u00f3n profunda. La palabra reservada open, se puede usar para un m\u00f3dulo o para declarar paquetes espec\u00edficos como open.</li> </ul> </li> <li> <p>Automatic modules: no tienen fichero descriptor. Se crean despu\u00e9s de agregar un fichero jar a la ruta del m\u00f3dulo. No se declara expl\u00edcitamente por el desarrollador dentro del fichero descriptor del m\u00f3dulo. M\u00e1s bien, se crea autom\u00e1ticamente cuando se coloca un fichero jar en la ruta del m\u00f3dulo. Requiere que por defecto todos los m\u00f3dulos de la plataforma, todos nuestros propios m\u00f3dulos y los dem\u00e1s m\u00f3dulos autom\u00e1ticos. Por defecto exporta todos sus paquetes. Son \u00fatiles para c\u00f3digo de terceros.</p> </li> </ul>"},{"location":"ud5/51modulo/#unnamed-modul-modul-sin-nombre","title":"Unnamed modul (m\u00f3dul sin nombre)","text":"<p>No tiene nombre y tampoco lo declaramos. Exporta todos sus paquetes y lee todos los m\u00f3dulos en el JDK y en la ruta del m\u00f3dulo. Es un m\u00f3dulo formado por ficheros jar de la ruta de clase, y todos estos archivos jar forman el m\u00f3dulo sin nombre. Un m\u00f3dulo con nombre NO PUEDE REQUERIR un m\u00f3dulo sin nombre.</p>"},{"location":"ud5/51modulo/#aggregator-modules","title":"Aggregator modules","text":"<p>Por \u00faltimo tenemos los m\u00f3dulos agregados. \u00c9stos existen por necesidad. Por ejemplo imaginad que nuestro m\u00f3dulo depende de 3 m\u00f3dulos. Podemos crear un aggregator module para esos tres m\u00f3dulos y de esta forma nuestro m\u00f3dulo solo depender\u00eda de este \u00fanico m\u00f3dulo agregado que contiene los otros tres.</p>"},{"location":"ud5/51modulo/#module-path-y-class-path","title":"Module Path y Class Path","text":"<p>JDK 9 introdujo el concepto de module path o ruta de m\u00f3dulo. Module Path puede representar:</p> <ul> <li>Una ruta a una secuencia de carpetas que contienen m\u00f3dulos.</li> <li>Una ruta a un fichero jar modular.</li> <li>Una ruta a un fichero jmod (versi\u00f3n extendida de JAR).</li> </ul> <p>El compilador utiliza una ruta de m\u00f3dulo para encontrar y resolver m\u00f3dulos. Cada m\u00f3dulo de un module path debe tener una declaraci\u00f3n (module-info.java).</p> <p>Class path representa una secuencia de ficheros java.</p>"},{"location":"ud5/51modulo/#crear-un-modulo-en-intellij","title":"Crear un m\u00f3dulo en IntelliJ","text":"<p>Con nuestra aplicaci\u00f3n abierta, seleccionamos File --&gt; New --&gt; Module. Se recomienda llamar a los paquetes igual que a los m\u00f3dulos.</p>"}]}